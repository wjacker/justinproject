<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()">
    <mx:Consumer id="consumer" destination="chat" message="messageHandler(event.message)"/>
    <mx:Producer id="producer" destination="chat"/>

    <mx:Script>
        <![CDATA[
        	import mx.collections.ArrayCollection;
        	import mx.rpc.AbstractOperation;
        	import mx.rpc.remoting.mxml.Operation;
        	import mx.rpc.AsyncToken;
        	import mx.rpc.remoting.mxml.RemoteObject;
        	import mx.messaging.channels.AMFChannel;
        	import mx.messaging.ChannelSet;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;
            import mx.messaging.messages.AsyncMessage;
            import mx.messaging.messages.IMessage;
            
            private var service : RemoteObject;
            private var i : int = 0;
            
            private function init() : void
            {
            	service = new RemoteObject();
                var channel : ChannelSet = new ChannelSet();
                var amf : AMFChannel = new AMFChannel();
                amf.uri = "http://flexmessagebroadcast.appspot.com/messagebroker/amf";
                channel.addChannel(amf);
                service.channelSet = channel;
                service.destination = "EmployeeService";

            	service.showBusyCursor = true;
            	
            	var channelSet : ChannelSet = new ChannelSet();
	            var amfpollingChannel : AMFChannel = new AMFChannel();
	            amfpollingChannel.uri = "http://flexmessagebroadcast.appspot.com/messagebroker/amfpolling";
	            channelSet.addChannel(amfpollingChannel);
            	consumer.channelSet = channelSet;
            	producer.channelSet = channelSet;
            	consumer.subscribe();
            }
            
            private function send():void{
               /*  var message:IMessage = new AsyncMessage();
                message.body.chatMessage = msg.text;
                producer.send(message);
                msg.text = ""; */
            }
            private function messageHandler(message:IMessage):void{
                /* log.text += message.body.chatMessage + "\n"; */
            }

            private function faultHandler(fault:FaultEvent):void {
                result_text.text = "code:\n" + fault.fault.faultCode + "\n\nMessage:\n" + fault.fault.faultString + "\n\nDetail:\n" + fault.fault.faultDetail;
            }
            private function resultHandler(evt:ResultEvent):void {
            	dataGrid.dataProvider = evt.result as ArrayCollection;
            }
            
            private function saveResultHandler(evt:ResultEvent):void {
                result_text.text = i.toString();
                i++;
                sayHello();
            }
            
            private function sayHello() : void
            {
            	if(i <= 500)
            	{
            		var employee : Employee = new Employee();
	            	employee.firstName = "Justin" + i;
	            	employee.lastName = "Wang" + i;
	            	employee.hireDate = new Date();
	            	employee.title = "DEV" + i;
	            	
	            	var op : AbstractOperation = service.getOperation("saveEmployee");
	            	op.arguments = [employee];
		            var token : AsyncToken = AsyncToken(op.send());
		            token.addResponder(new mx.rpc.Responder(saveResultHandler, faultHandler));
            	}
            	else
            	{
            		result_text.text = "Complete";
            	}
            	
            	
            }
            
            private function getEmployeeList() : void
            {
            	var op : AbstractOperation = service.getOperation("getEmployeeList");
            	var token : AsyncToken = AsyncToken(op.send());
	            token.addResponder(new mx.rpc.Responder(resultHandler, faultHandler));
            }
            
            private function subscribe() : void
            {
            	
            }
            
            private function unsubscribe() : void
            {
            	consumer.unsubscribe();
            }
            
            private function executeQuery() : void
            {
            	var op : AbstractOperation = service.getOperation("executeQuery");
            	op.arguments = [query_text.text, from_txt.text, to_txt.text];
            	var token : AsyncToken = AsyncToken(op.send());
	            token.addResponder(new mx.rpc.Responder(resultHandler, faultHandler));
            }
            
            
        ]]>
    </mx:Script>
    <mx:Button x="10" y="132" label="sayHello" width="79" click="sayHello()"/>
    <mx:Button x="10" y="132" label="getEmployeeList" width="79" click="getEmployeeList()"/>
    <!--<mx:Button x="10" y="132" label="subscribe" width="79" click="subscribe()"/>
    <mx:Button x="10" y="132" label="unsubscribe" width="79" click="unsubscribe()"/>-->
    <mx:HBox width="100%">
    	<mx:TextArea x="10" y="27" width="319" height="100" id="result_text"/>
    	
    	<mx:DataGrid id="dataGrid" width="100%">
		
		</mx:DataGrid>
    </mx:HBox>
    <!--<mx:Panel title="Chat" width="100%" height="100%">
        <mx:TextArea id="log" width="100%" height="100%"/>
        <mx:ControlBar>
            <mx:TextInput id="msg" width="100%" enter="send()"/>
            <mx:Button label="Send B" click="send()"/>
        </mx:ControlBar>
    </mx:Panel>-->
	<mx:TextArea x="10" y="27" width="100%" height="300" id="query_text" text="select from com.justin.project.database.dao.Employee"/>
	<mx:HBox>
		<mx:Label text="Data range from"/>
		<mx:TextInput id="from_txt"/>
		<mx:Label text="to"/>
		<mx:TextInput id="to_txt"/>
	</mx:HBox>
	<mx:Button x="10" y="132" label="executeQuery" click="executeQuery()"/>
	
</mx:Application>