<?xml version="1.0" encoding="utf-8"?>
<mx:Application layout="absolute"
                xmlns:mx="http://www.adobe.com/2006/mxml"
                applicationComplete="init()"
                xmlns:rtc="AfcsNameSpace"
                xmlns:datagrid="com.justin.common.components.datagrid.*" xmlns:components="com.justin.common.components.*">

    <mx:Script>
        <![CDATA[
            import com.adobe.coreUI.controls.whiteboardClasses.WBShapeDescriptor;
            import com.adobe.coreUI.controls.whiteboardClasses.shapeDescriptors.WBArrowShapeDescriptor;
            import com.adobe.coreUI.controls.whiteboardClasses.shapeDescriptors.WBEllipseShapeDescriptor;
            import com.adobe.coreUI.controls.whiteboardClasses.shapeDescriptors.WBHighlightAreaShapeDescriptor;
            import com.adobe.coreUI.controls.whiteboardClasses.shapeDescriptors.WBLineShapeDescriptor;
            import com.adobe.coreUI.controls.whiteboardClasses.shapeDescriptors.WBRectangleShapeDescriptor;
            import com.adobe.coreUI.controls.whiteboardClasses.shapeDescriptors.WBRoundedRectangleShapeDescriptor;
            import com.adobe.coreUI.controls.whiteboardClasses.shapeDescriptors.WBTextShapeDescriptor;
            import com.adobe.coreUI.events.WBModelEvent;
            import com.adobe.rtc.events.AuthenticationEvent;
            import com.adobe.rtc.events.CollectionNodeEvent;
            import com.adobe.rtc.events.ConnectSessionEvent;
            import com.adobe.rtc.events.SessionEvent;
            import com.justin.common.components.MyLinkButton;
            import com.justin.common.components.datagrid.PageableGridEvent;
            import com.justin.common.components.datagrid.Pager;
            import com.justin.proxy.EmployeeProxy;

            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.controls.dataGridClasses.DataGridColumn;
            import mx.core.IFlexDisplayObject;
            import mx.events.CollectionEvent;
            import mx.formatters.DateFormatter;
            import mx.managers.PopUpManager;
            import mx.messaging.ChannelSet;
            import mx.messaging.channels.AMFChannel;
            import mx.rpc.AbstractOperation;
            import mx.rpc.AsyncToken;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.remoting.RemoteObject;
            private var employeeProxy:EmployeeProxy = EmployeeProxy.getInstance();

            [Bindable]
            protected var _shapes:ArrayCollection=new ArrayCollection();
            protected var _cMenu:ContextMenu=new ContextMenu();
            protected var _lastMouseX:int=15;
            protected var _lastMouseY:int=15;

            private var dateFormatter:DateFormatter=new DateFormatter();
            private var pager: Pager = new Pager();
            private var initial : Boolean = true;
            private var recordCount : Number = 0;

            private function init():void
            {
                dateFormatter.formatString="MM/DD/YYYY";

                sess.addEventListener(SessionEvent.ERROR, onEventNotification);
                sess.addEventListener(SessionEvent.SYNCHRONIZATION_CHANGE, onEventNotification);
                auth.addEventListener(AuthenticationEvent.AUTHENTICATION_FAILURE, onEventNotification);
                auth.addEventListener(AuthenticationEvent.AUTHENTICATION_SUCCESS, onEventNotification);

                popup(loginWindow);
            }

            private function wbInit():void
            {
                default_WB.shapesToolBar.move(0, 0)
                default_WB.addEventListener(CollectionNodeEvent.SYNCHRONIZATION_CHANGE, onSyncing);
            }

            private function popup(window:IFlexDisplayObject):void
            {
                PopUpManager.addPopUp(window, this, true);
                PopUpManager.centerPopUp(window);
                window.visible=true;
            }

            /**
             * Process AFCS Events
             */
            private function onEventNotification(p_event:Event):void
            {
                if (p_event.type == SessionEvent.SYNCHRONIZATION_CHANGE)
                {
                    if (sess.isSynchronized)
                    {
                        //
                        // isSyncronized==true : we are connected to the room
                        //
                        //panel.title = "Connected to room " + sess.roomURL;
                        PopUpManager.removePopUp(loginWindow);
                        loginWindow.enabled=false;
                        initRPCConnection();
                    }
                    else
                    {
                        //
                        // isSyncronized==false : we are disconnected from the room
                        //
                        sess.roomURL=null;
                        notificationMessage.text="";
                        popup(loginWindow);
                    }
                }

                else if (p_event.type == AuthenticationEvent.AUTHENTICATION_SUCCESS)
                {
                    //
                    // Authentication succeeded
                    //
                    //notificationMessage.text = "Authentication Succeeded";
                    notificationMessage.text="Loading Data, please wait : )";
                }

                else if (p_event.type == AuthenticationEvent.AUTHENTICATION_FAILURE)
                {
                    //
                    // Authentication failed : bad password or invalid username
                    //
                    notificationMessage.text="Authentication Failed";
                    loginWindow.enabled=true;
                }

                else if (p_event.type == SessionEvent.ERROR)
                {
                    //
                    // Generic session error, but this can happen if you mispell the account/room names
                    // (sError.error.name == "INVALID_INSTANCE" and sError.error.message == "Invalid Instance")
                    //
                    var sError:SessionEvent=p_event as SessionEvent;
                    notificationMessage.text=sError.error.message;
                }

                else
                    notificationMessage.text="Got event " + p_event;
            }

            private function initRPCConnection():void
            {
            }

            private function getPageCount() : void
            {
                employeeProxy.getRemoteDelegate().invokeWithHandler(function (event : ResultEvent) : void
                {
                    recordCount = event.result as Number;
                    pagedDataGrid.collectionLength=recordCount;
                    pager.recFrom=0;
                    pager.pageSize=20;

                    employeeProxy.getRemoteDelegate().invokeWithHandler(dataResultHandler, faultHandler, "getEmployeeListBy", pager)
                },faultHandler,"getPageCount")
            }

            private function dataIsOutOfRange(evt:PageableGridEvent):void
            {
                if (pagedDataGrid.sorted)
                {
                    pager.recFrom=evt.data.start;
                    pager.sortField=evt.data.field;
                    pager.pageSize=20;
                    pager.sortType=evt.data.sortType;
                }
                else
                {
                    pager.recFrom=evt.data.start;
                    pager.pageSize=20;
                }
                employeeProxy.getRemoteDelegate().invokeWithHandler(dataResultHandler, faultHandler, "getEmployeeListBy", pager);
            }

            private function dataResultHandler(result : ResultEvent) : void
            {
            	if (initial) {
					initial = false;
					pagedDataGrid.dataProvider = result.result as ArrayCollection;

				} else {
					pagedDataGrid.appendData(result.result);
				}
            }

            private function dataSort(evt:PageableGridEvent):void
            {
                pager.recFrom=evt.data.start;
                pager.pageSize=20;
                pager.sortField=evt.data.field;
                pager.sortType=evt.data.sortType;
                employeeProxy.getRemoteDelegate().invokeWithHandler(dataResultHandler, faultHandler, "getEmployeeListBy", pager);
            }

            private function login():void
            {
                notificationMessage.text="";
                auth.userName=username.text;
                //auth.password = passwordBox.visible ? password.text : null; // password==null : the user is a guest
                sess.roomURL=roomURL.text;
                loginWindow.enabled=false;
                sess.login();
            }

            /**
             * Operations such as initializing the context Menu and propulating the shape Ids combo-box
             * after the WhiteBoard is synchronized.
             */
            protected function onSyncing(p_evt:Event):void
            {
                if (default_WB.isSynchronized)
                {
                    _shapes.removeAll();
                    var shapeIds:Array=default_WB.model.getShapeIDs();
                    shapeIds.sort(orderShapeId);
                    //			 		_shapes.source = default_WB.model.getShapeIDs();
                    for (var i:int=0; i < shapeIds.length; i++)
                    {
                        var shapeString:String=getShapeClass(shapeIds[i]);
                        var labelString:String=shapeIds[i] + " - " + shapeString;
                        _shapes.addItem({label: labelString, shapeId: shapeIds[i]});
                    }
                    default_WB.model.addEventListener(WBModelEvent.SHAPE_ADD, onShapeAdded);
                    default_WB.model.addEventListener(WBModelEvent.SHAPE_REMOVE, onShapeRemoved);
                    removeDefaultContextMenuItems();
                    addContextMenu();
                    default_WB.contextMenu=_cMenu;
                    default_WB.addEventListener(MouseEvent.CLICK, onMouseClick);
                }
            }

            private function orderShapeId(a:Object, b:Object):int
            {
                if (Number(a) == Number(b))
                    return 0;
                else if (Number(a) > Number(b))
                    return 1;
                else
                    return -1;
            }


            /**
             * This method stores the last point clicked. It is used by all the add** methods.
             * A simple way to add shapes at the last clicked point instead of adding it randomly or at a fixed point
             */
            protected function onMouseClick(p_evt:MouseEvent):void
            {
                _lastMouseX=p_evt.localX;
                _lastMouseY=p_evt.localY;
            }

            /**
             * Event Listener when a shape is added. The shapeId of the shape addes is added/updated in the local list of ShapeIds
             */
            protected function onShapeAdded(p_evt:WBModelEvent):void
            {
                var shapeString:String=getShapeClass(p_evt.shapeID);
                var labelString:String=p_evt.shapeID + " - " + shapeString;
                _shapes.addItem({label: labelString, shapeId: p_evt.shapeID});
            }

            /**
             * Event Listener when a shape is deleted/removed. The shapeId of the shape addes is removed/updated in the local list of ShapeIds
             */
            protected function onShapeRemoved(p_evt:WBModelEvent):void
            {
                var shapeString:String=getShapeClass(p_evt.shapeID);
                var labelString:String=p_evt.shapeID + " - " + shapeString;
                var shapeIndex:int=-1;
                for (var i:int=0; i < _shapes.length; i++)
                {
                    if (_shapes[i].shapeId == p_evt.shapeID)
                    {
                        shapeIndex=i;
                        break;
                    }
                }
                if (shapeIndex != -1)
                {
                    _shapes.removeItemAt(shapeIndex);
                }
            }

            /**
             * The shape properties and attributes are updated in the Grid when a user selects a shapeId
             */
            protected function onShapeSelected(p_collEvent:CollectionEvent = null):void
            {
                if (shapeListCombo.selectedIndex != -1 && shapeListCombo.selectedItem.shapeId)
                {
                    default_WB.selectedShapeIDs=[shapeListCombo.selectedItem.shapeId];
                    var shapeId:String=shapeListCombo.selectedItem.shapeId;
                    //Get the shapeDescriptor from the Model using the shape Id.
                    var shapeDesc:WBShapeDescriptor=default_WB.model.getShapeDescriptor(shapeId);
                    xInput.text=shapeDesc.x.toString();
                    yInput.text=shapeDesc.y.toString();
                    widthInput.text=shapeDesc.width.toString();
                    heightInput.text=shapeDesc.height.toString();
                    rotationInput.text=shapeDesc.rotation.toString();
                    propertyGrid.visible=true;
                    primaryColor.enabled=true;
                    gradientFill.enabled=true;
                    dropShadow.enabled=true;
                    var propObject:Object=shapeDesc.propertyData;
                    if (propObject.hasOwnProperty("alpha"))
                    {
                        alphaHSlider.value=shapeDesc.propertyData.alpha;
                    }
                    if (propObject.hasOwnProperty("lineColor"))
                    {
                        lineColor.selectedColor=shapeDesc.propertyData.lineColor;
                    }
                    if (propObject.hasOwnProperty("lineThickness"))
                    {
                        lineThickness.selectedItem=shapeDesc.propertyData.lineThickness;
                    }
                    if (propObject.hasOwnProperty("gradientFill"))
                    {
                        gradientFill.selected=shapeDesc.propertyData.gradientFill;
                    }
                    if (propObject.hasOwnProperty("dropShadow"))
                    {
                        dropShadow.selected=shapeDesc.propertyData.dropShadow;
                    }
                    if (propObject.hasOwnProperty("primaryColor"))
                    {
                        primaryColor.selectedColor=shapeDesc.propertyData.primaryColor;
                    }
                    if (shapeDesc.factoryID == "com.adobe.coreUI.controls.whiteboardClasses.shapes::WBTextShapeFactory")
                    {
                        propertyGrid.visible=false;
                    }
                    else if (shapeDesc.factoryID == "com.adobe.coreUI.controls.whiteboardClasses.shapes::WBArrowShapeFactory")
                    {
                        primaryColor.enabled=false;
                    }
                    else if (shapeDesc.factoryID == "com.adobe.coreUI.controls.whiteboardClasses.shapes::WBMarkerShapeFactory")
                    {
                        primaryColor.enabled=false;
                        gradientFill.enabled=false;
                        dropShadow.enabled=false;
                    }
                }
            }

            /**
             * A new shapeDescriptor is constructed with the modified propertyData and Attributes and is used to modify the existing shape
             */
            protected function modifyTheShape():void
            {
                if (shapeListCombo.selectedItem.shapeId && shapeListCombo.selectedIndex != -1)
                {
                    var shapeId:String=shapeListCombo.selectedItem.shapeId.toString();
                    //New ShapeDescriptor with both the modified and unmodified Attributes
                    var newShapeDesc:WBShapeDescriptor=new WBShapeDescriptor();
                    newShapeDesc.x=Number(xInput.text);
                    newShapeDesc.y=Number(yInput.text);
                    newShapeDesc.width=Number(widthInput.text);
                    newShapeDesc.height=Number(heightInput.text);
                    newShapeDesc.rotation=Number(rotationInput.text);

                    var propertyDataObject:Object=new Object();
                    if (propertyGrid.visible)
                    {
                        propertyDataObject.alpha=alphaHSlider.value;
                        propertyDataObject.lineColor=lineColor.value;
                        propertyDataObject.lineThickness=lineThickness.value;
                        if (gradientFill.enabled)
                        {
                            propertyDataObject.gradientFill=gradientFill.selected;
                        }
                        if (dropShadow.enabled)
                        {
                            propertyDataObject.dropShadow=dropShadow.selected;
                        }
                        if (primaryColor.enabled)
                        {
                            propertyDataObject.primaryColor=primaryColor.value;
                        }
                    }
                    newShapeDesc.propertyData=propertyDataObject;
                    //API to modify the shape.
                    //Not worried about the optimization as the API will inspect for changes and update the model only if there
                    // is atleast one property thats been modified
                    default_WB.model.modifyShapeDescriptor(shapeId, newShapeDesc);
                }
            }

            /**
             * Delete a shape. The operation removes the shape from the canvas and deletes the shape data from the model
             */
            protected function deleteTheShape():void
            {
                if (shapeListCombo.selectedItem.shapeId && shapeListCombo.selectedIndex != -1)
                {
                    var shapeId:String=shapeListCombo.selectedItem.shapeId.toString();
                    default_WB.model.removeShape(shapeId);
                    shapeListCombo.selectedIndex=-1;
                    shapeListCombo.prompt="Select ShapeId";
                }
            }

            /**
             * Add a few context Menu options to add shapes using the context menu
             */
            protected function addContextMenu():void
            {
                var ellipseContextMenuItem:ContextMenuItem=new ContextMenuItem("Add Ellipse");
                ellipseContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addShapes);
                var rectangleContextMenuItem:ContextMenuItem=new ContextMenuItem("Add Rectangle");
                rectangleContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addShapes);
                var rRectangleContextMenuItem:ContextMenuItem=new ContextMenuItem("Add Rounded Rectangle");
                rRectangleContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addShapes);
                var textContextMenuItem:ContextMenuItem=new ContextMenuItem("Add Text");
                textContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addShapes);
                var arrowContextMenuItem:ContextMenuItem=new ContextMenuItem("Add Arrow");
                arrowContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addShapes);
                var lineContextMenuItem:ContextMenuItem=new ContextMenuItem("Add Line");
                lineContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addShapes);
                var hAreaContextMenuItem:ContextMenuItem=new ContextMenuItem("Add HighLight Area");
                hAreaContextMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, addShapes);
                _cMenu.customItems.push(ellipseContextMenuItem);
                _cMenu.customItems.push(rectangleContextMenuItem);
                _cMenu.customItems.push(rRectangleContextMenuItem);
                _cMenu.customItems.push(textContextMenuItem);
                _cMenu.customItems.push(arrowContextMenuItem);
                _cMenu.customItems.push(lineContextMenuItem);
                _cMenu.customItems.push(hAreaContextMenuItem);
            }

            protected function removeDefaultContextMenuItems():void
            {
                _cMenu.hideBuiltInItems();
                var defaultItems:ContextMenuBuiltInItems=_cMenu.builtInItems;
                defaultItems.print=true;
            }


            protected function addShapes(p_evt:ContextMenuEvent):void
            {
                if (p_evt.currentTarget.caption == "Add Arrow")
                {
                    addArrow();
                }

                if (p_evt.currentTarget.caption == "Add Ellipse")
                {
                    addEllipse();
                }

                if (p_evt.currentTarget.caption == "Add HighLight Area")
                {
                    addHighLightArea();
                }

                if (p_evt.currentTarget.caption == "Add Line")
                {
                    addLine();
                }

                if (p_evt.currentTarget.caption == "Add Rectangle")
                {
                    addRectangle();
                }

                if (p_evt.currentTarget.caption == "Add Rounded Rectangle")
                {
                    addRoundedRectangle();
                }

                if (p_evt.currentTarget.caption == "Add Text")
                {
                    addSampleText();
                }
            }

            protected function addShapeClick():void
            {
                if (shapeType.value == "Arrow")
                {
                    addArrow();
                }

                if (shapeType.value == "Ellipse")
                {
                    addEllipse();
                }

                if (shapeType.value == "Highlight Area")
                {
                    addHighLightArea();
                }

                if (shapeType.value == "Line")
                {
                    addLine();
                }

                if (shapeType.value == "Rectangle")
                {
                    addRectangle();
                }

                if (shapeType.value == "Rounded Rectangle")
                {
                    addRoundedRectangle();
                }

                if (shapeType.value == "Text")
                {
                    addSampleText();
                }
            }

            /**
             * Add an Ellipse using the WBEllipseShapeDescriptor. X, Y and Width and Height are the basic params that need to be specified
             */
            protected function addEllipse():void
            {
                var ellipseDesc:WBEllipseShapeDescriptor=new WBEllipseShapeDescriptor();
                ellipseDesc.x=_lastMouseX;
                ellipseDesc.y=_lastMouseY;
                ellipseDesc.width=ellipseDesc.height=100;
                //Add the shapeData to the model. Once the model is updated the shape is added to the canvas.
                default_WB.model.addShape(ellipseDesc);
            }

            /**
             * Add a Rectangle using the WBRectangleShapeDescriptor.
             */
            protected function addRectangle():void
            {
                var rectangleShapeDesc:WBRectangleShapeDescriptor=new WBRectangleShapeDescriptor();
                rectangleShapeDesc.x=_lastMouseX;
                rectangleShapeDesc.y=_lastMouseY;
                rectangleShapeDesc.width=rectangleShapeDesc.height=100;
                default_WB.model.addShape(rectangleShapeDesc);
            }

            /**
             * Add a Rounded Rectangle using the WBRoundedRectangleShapeDescriptor.
             */
            protected function addRoundedRectangle():void
            {
                var roundedRectShapeDesc:WBRoundedRectangleShapeDescriptor=new WBRoundedRectangleShapeDescriptor();
                roundedRectShapeDesc.x=_lastMouseX;
                roundedRectShapeDesc.y=_lastMouseY;
                roundedRectShapeDesc.width=roundedRectShapeDesc.height=100;
                default_WB.model.addShape(roundedRectShapeDesc);
            }

            /**
             * Add a Line using the WBLineShapeDescriptor.
             */
            protected function addLine():void
            {
                var lineShapeDesc:WBLineShapeDescriptor=new WBLineShapeDescriptor();
                lineShapeDesc.x=_lastMouseX;
                lineShapeDesc.y=_lastMouseY;
                lineShapeDesc.width=lineShapeDesc.height=100;
                default_WB.model.addShape(lineShapeDesc);
            }

            /**
             * Add an Arrow  using the WBArrowShapeDescriptor.
             */
            protected function addArrow():void
            {
                var arrowDesc:WBArrowShapeDescriptor=new WBArrowShapeDescriptor();
                arrowDesc.x=_lastMouseX;
                arrowDesc.y=_lastMouseY;
                arrowDesc.width=arrowDesc.height=100;
                default_WB.model.addShape(arrowDesc);
            }

            /**
             * Add Text using the WBTextShapeDescriptor.
             */
            protected function addSampleText():void
            {
                var textShapeDesc:WBTextShapeDescriptor=new WBTextShapeDescriptor();
                textShapeDesc.x=_lastMouseX;
                textShapeDesc.y=_lastMouseY;
                textShapeDesc.htmlText="SampleText";
                default_WB.model.addShape(textShapeDesc);
            }

            /**
             * Add a HightLight Area Shape using the WBHighlightAreaShapeDescriptor.
             * Note an HightLight area shape is nothing but a rounded Rectangle whose alpha is 0.5
             */
            protected function addHighLightArea():void
            {
                var hightLightAreaDesc:WBHighlightAreaShapeDescriptor=new WBHighlightAreaShapeDescriptor();
                hightLightAreaDesc.x=_lastMouseX;
                hightLightAreaDesc.y=_lastMouseY;
                hightLightAreaDesc.width=hightLightAreaDesc.height=100;
                default_WB.model.addShape(hightLightAreaDesc);
            }

            protected function getShapeClass(p_shapeId:String):String
            {
                var stringFullClass:String=flash.utils.getQualifiedClassName(default_WB.model.getShapeDescriptor(p_shapeId));
                return stringFullClass.substring(stringFullClass.lastIndexOf("::") + 2, stringFullClass.length);
            }



            private function executeQuery():void
            {
                if (from_txt.text != "" && to_txt.text != "")
                {
                    employeeProxy.getRemoteDelegate().invokeWithHandler(resultHandler, faultHandler, "executeQuery", query_text.text, from_txt.text, to_txt.text);
                }
                else
                {
                    employeeProxy.getRemoteDelegate().invokeWithHandler(resultHandler, faultHandler, "executeQuery", query_text.text);
                }
            }

            private function faultHandler(fault:FaultEvent):void
            {
                Alert.show("code:\n" + fault.fault.faultCode + "\n\nMessage:\n" + fault.fault.faultString + "\n\nDetail:\n" + fault.fault.faultDetail, "Error");
            }

            private function resultHandler(evt:ResultEvent):void
            {
                queryResult.dataProvider=evt.result as ArrayCollection;
            }

            private function dateFunction(item:Object, column:DataGridColumn):String
            {
                return dateFormatter.format(item[column.dataField]);
            }

            private function initPagedDataGrid() : void
            {
            	pagedDataGrid.collectionLength=recordCount;
                pagedDataGrid.addEventListener(PageableGridEvent.OUT_OF_RANGE, dataIsOutOfRange);
                pagedDataGrid.addEventListener(PageableGridEvent.SORT, dataSort);

                getPageCount();
            }

            private var  loader:URLLoader = new URLLoader();

            public function initResource() : void
            {
                loader.load(new URLRequest("resource/resource.xml"));
                loader.addEventListener(Event.COMPLETE, loadComplete);
            }

            public function loadComplete(event:Event) : void
            {
                var linkButton:MyLinkButton = null;
                var resourceXML:XML = new XML(this.loader.data);
                if (resourceXML.hasOwnProperty("resource"))
                {
                    var resourceLinkList:XMLList = resourceXML.resource.link;
                    for each (var resourceLink:XML in resourceLinkList)
                    {

                        linkButton = new MyLinkButton();
                        linkButton.label = resourceLink.@name;
                        linkButton.linkURL = resourceLink.@url;
                        this.resourceContainer.addChild(linkButton);
                    }
                }
                return;
            }
        ]]>
    </mx:Script>

    <!--
         | Standard Authenticator
    -->
    <rtc:AdobeHSAuthenticator id="auth"/>

    <!--
         | Automatically promote guests so they can use the application
         |
         | Note: In order for this to work, the host needs to enter the room once to enable all the pods
         | (enter the room and go through the various screens)
    -->
    <rtc:RoomSettings id="settings"
                      autoPromote="true"/>

    <mx:Panel id="panel"
              title="Welcome"
              width="100%"
              height="100%"
              paddingLeft="5"
              paddingTop="5"
              paddingRight="5"
              paddingBottom="5">

        <!--
             | Login Dialog Box
        -->
        <mx:TitleWindow id="loginWindow"
                        title="Please input you Name inter our room:"
                        visible="false">
            <mx:VBox>
                <mx:HBox includeInLayout="false"
                         visible="false">
                    <mx:Label text="Room URL:"
                              width="70"/>
                    <mx:TextInput id="roomURL"
                                  width="295"
                                  tabIndex="1">
                        <mx:text>https://connectnow.acrobat.com/wjacker2/test</mx:text>
                    </mx:TextInput>
                </mx:HBox>
                <mx:HBox>
                    <!--<mx:Label text="Username:" width="70"/>-->
                    <mx:TextInput id="username"
                                  tabIndex="2">
                        <mx:text>guest</mx:text>
                    </mx:TextInput>
                    <mx:Button label="Login"
                               click="login()"
                               width="126"
                               tabIndex="4"/>
                </mx:HBox>
                <mx:HBox visible="false"
                         includeInLayout="false">
                    <mx:HBox id="passwordBox">
                        <mx:Label text="Password:"
                                  width="70"/>
                        <mx:TextInput id="password"
                                      displayAsPassword="true"
                                      tabIndex="3"/>
                    </mx:HBox>
                    <mx:RadioButton label="User"
                                    click="passwordBox.visible = true"/>
                    <mx:RadioButton label="Guest"
                                    selected="true"
                                    click="passwordBox.visible = false"/>
                </mx:HBox>
                <mx:Text id="notificationMessage"
                         text=""/>
            </mx:VBox>
        </mx:TitleWindow>

        <!--
             | AFCS application UI wrapped in ConnectSession
        -->
        <rtc:ConnectSessionContainer id="sess"
             authenticator="{auth}"
             initialRoomSettings="{settings}"
             autoLogin="false"
             width="100%"
             height="100%">
            <mx:VBox width="100%" height="100%">
                <mx:HBox width="100%"
                    height="100%"
                    horizontalGap="0">
                    <mx:VBox>
                        <mx:TabBar dataProvider="viewStack"
                            direction="vertical"
                            width="100"
                            verticalGap="0"/>
                        <!--mx:Button label="Disconnect" click="sess.close()"/-->
                    </mx:VBox>

                    <mx:ViewStack id="viewStack"
                        width="100%"
                        height="100%">
                        <!--
                        | Chat pod and roster
                        -->
                        <mx:HBox label="Chat"
                            width="100%"
                            height="100%">
                            <rtc:SimpleChat width="60%"
                                height="100%"/>
                            <mx:List alternatingItemColors="[#DFDFDF,#EEEEEE]"
                                dataProvider="{sess.userManager.userCollection}"
                                width="40%"
                                height="100%"
                                labelField="displayName"/>
                        </mx:HBox>

                        <!--
                        | Camera/Audio pod
                        -->
                        <mx:Canvas label="Audio/Video"
                            width="100%"
                            height="100%">
                            <rtc:WebCamera left="0"
                                right="0"
                                top="0"
                                bottom="0"/>
                        </mx:Canvas>

                        <!--
                        | Whiteboard pod
                        -->
                        <mx:Canvas label="Whiteboard"
                            width="100%"
                            height="100%">
                            <!-- for some strange reason the shapesToolBar starts outside the WhiteBoard canvas
                            so when the whiteBoard is created I move shapesToolBar back to where it should be -->
                            <rtc:SharedWhiteBoard id="default_WB"
                                width="100%"
                                height="100%"
                                creationComplete="wbInit()"/>
                            <mx:HBox id="shapeController"
                                alpha="1.0"
                                backgroundColor="#000000"
                                backgroundAlpha="0.5"
                                left="5"
                                right="5"
                                bottom="10"
                                paddingBottom="5"
                                paddingTop="5"
                                paddingLeft="5"
                                paddingRight="5"
                                verticalAlign="middle">
                                <mx:VBox verticalAlign="middle"
                                    horizontalAlign="center">
                                    <mx:ComboBox id="shapeListCombo"
                                        dataProvider="{_shapes}"
                                        color="0x000000"
                                        width="165"
                                        prompt="Select ShapeId"
                                        change="onShapeSelected()"/>
                                    <mx:VBox click="deleteTheShape()"
                                        verticalGap="0"
                                        horizontalGap="0">
                                        <mx:Label text="X"
                                            fontSize="25"
                                            color="#FF0000"
                                            textAlign="center"/>
                                        <mx:Label text="delete"
                                            textAlign="center"/>
                                    </mx:VBox>
                                    <mx:Button id="changeShape"
                                        click="modifyTheShape()"
                                        label="Modify Shape"/>
                                </mx:VBox>
                                <mx:VRule height="100%"/>
                                <mx:Grid verticalGap="10"
                                    horizontalGap="10">
                                    <mx:GridRow>
                                        <mx:GridItem>
                                            <mx:HBox>
                                                <mx:Label text="X:"
                                                    width="60"/>
                                                <mx:TextInput id="xInput"
                                                    width="40"/>
                                            </mx:HBox>
                                        </mx:GridItem>
                                        <mx:GridItem>
                                            <mx:HBox>
                                                <mx:Label text="Y:"
                                                    width="50"/>
                                                <mx:TextInput id="yInput"
                                                    width="40"/>
                                            </mx:HBox>
                                        </mx:GridItem>
                                    </mx:GridRow>
                                    <mx:GridRow>
                                        <mx:GridItem>
                                            <mx:HBox>
                                                <mx:Label text="Width:"
                                                    width="60"/>
                                                <mx:TextInput id="widthInput"
                                                    width="40"/>
                                            </mx:HBox>
                                        </mx:GridItem>
                                        <mx:GridItem>
                                            <mx:HBox>
                                                <mx:Label text="Height:"
                                                    width="50"/>
                                                <mx:TextInput id="heightInput"
                                                    width="40"/>
                                            </mx:HBox>
                                        </mx:GridItem>
                                    </mx:GridRow>
                                    <mx:GridRow>
                                        <mx:GridItem>
                                            <mx:HBox verticalAlign="middle"
                                                horizontalAlign="center">
                                                <mx:Label text="Rotation:"
                                                    width="60"/>
                                                <mx:TextInput id="rotationInput"
                                                    width="40"/>
                                            </mx:HBox>
                                        </mx:GridItem>
                                        <mx:GridItem horizontalAlign="center"
                                            verticalAlign="middle">
                                        </mx:GridItem>
                                    </mx:GridRow>
                                </mx:Grid>
                                <mx:VRule height="100%"/>
                                <mx:Grid id="propertyGrid"
                                    verticalGap="10"
                                    horizontalGap="10">
                                    <mx:GridRow>
                                        <mx:GridItem>
                                            <mx:CheckBox id="dropShadow"
                                                label="Drop Shadow"/>
                                        </mx:GridItem>
                                        <mx:GridItem>
                                            <mx:CheckBox id="gradientFill"
                                                label="Gradient Fill"/>
                                        </mx:GridItem>
                                    </mx:GridRow>
                                    <mx:GridRow>
                                        <mx:GridItem>
                                            <mx:HBox>
                                                <mx:ColorPicker id="lineColor"
                                                    showTextField="true"
                                                    selectedColor="0xFFFFFF"
                                                    labelField="Line Color"/>
                                                <mx:Label text="Line Color"/>
                                            </mx:HBox>
                                        </mx:GridItem>
                                        <mx:GridItem>
                                            <mx:HBox>
                                                <mx:ColorPicker id="primaryColor"
                                                    showTextField="true"
                                                    selectedColor="0xFFFFFF"
                                                    labelField="Primary Color"/>
                                                <mx:Label text="Primary Color"/>
                                            </mx:HBox>
                                        </mx:GridItem>
                                    </mx:GridRow>
                                    <mx:GridRow>
                                        <mx:GridItem>
                                            <mx:VBox verticalAlign="middle"
                                                horizontalAlign="center">
                                                <mx:HSlider id="alphaHSlider"
                                                    minimum="0"
                                                    maximum="1"
                                                    value="0"
                                                    dataTipPlacement="top"
                                                    tickColor="0x323232"
                                                    snapInterval="0.1"
                                                    tickInterval="0.2"
                                                    labels="[0,1]"
                                                    allowTrackClick="true"
                                                    liveDragging="true"/>
                                                <mx:Label text="Alpha"/>
                                            </mx:VBox>
                                        </mx:GridItem>
                                        <mx:GridItem horizontalAlign="center"
                                            verticalAlign="middle">
                                            <mx:VBox verticalAlign="middle"
                                                horizontalAlign="center">
                                                <mx:ComboBox id="lineThickness"
                                                    dataProvider="{new Array(1,2,5,10,15,20)}"
                                                    color="0x000000"/>
                                                <mx:Label text="Line Thickness"/>
                                            </mx:VBox>
                                        </mx:GridItem>
                                    </mx:GridRow>
                                </mx:Grid>
                                <mx:VRule height="100%"/>
                                <mx:VBox>
                                    <mx:ComboBox id="shapeType"
                                        dataProvider="{new Array('Ellipse', 'Rectangle', 'Rounded Rectangle', 'Line', 'Highlight Area', 'Text', 'Arrow')}"/>
                                    <mx:Button id="addShape"
                                        click="addShapeClick()"
                                        label="Add Shape"/>
                                </mx:VBox>
                            </mx:HBox>
                        </mx:Canvas>
                        <mx:Canvas label="Pageable Data Grid" creationComplete="initPagedDataGrid()"
                            width="100%"
                            height="100%">
                            <mx:TabNavigator width="100%" height="100%">
                                <mx:VDividedBox width="100%" label="Example"
                                    height="100%">
                                    <mx:VBox width="100%" label="Example">
                                        <mx:Label text="Paged Data Grid(support sort)"/>
                                        <datagrid:PagedDataGrid id="pagedDataGrid"
                                            width="100%"
                                            height="100%">
                                            <datagrid:columns>
                                                <mx:DataGridColumn dataField="firstName"
                                                    headerText="firstName"/>
                                                <mx:DataGridColumn dataField="lastName"
                                                    headerText="lastName"/>
                                                <mx:DataGridColumn dataField="title"
                                                    headerText="title"/>
                                                <mx:DataGridColumn dataField="hireDate"
                                                    headerText="hireDate"
                                                    labelFunction="dateFunction"/>
                                            </datagrid:columns>
                                        </datagrid:PagedDataGrid>
                                    </mx:VBox>
                                    <mx:VBox width="100%">

                                    </mx:VBox>
                                </mx:VDividedBox>
                                <mx:VBox label="Source Code">
                                    <mx:LinkButton label="DownLoad Front End Code" click="{navigateToURL(new URLRequest('http://flexmessagebroadcast.appspot.com/resource/PageGridCode.rar'), '_self');}"/>

                                    <mx:Label text="Back End Code"/>

                                    <mx:TextArea width="100%" height="50%">
                                        <mx:text>
                                            <![CDATA[
                                            public List<Employee> getEmployeeListBy(Pager pager)
                                            {
                                            ...find employeeList according to pager.
                                            return List<Employee>;
                                            }

                                            public int getPageCount()
                                            {
                                            ...calculate All record number
                                            return int;
                                            }
                                            ]]>
                                        </mx:text>

                                    </mx:TextArea>

                                </mx:VBox>
                                <mx:VBox width="100%" label="Query Window">
                                    <mx:Label text="query SQL text"/>
                                    <mx:TextArea x="10"
                                        y="27"
                                        width="100%"
                                        height="150"
                                        id="query_text"
                                        text="select from com.justin.project.database.dao.Employee order by firstName"/>
                                    <mx:HBox>
                                        <mx:Label text="Data range from"/>
                                        <mx:TextInput id="from_txt"
                                            text="0"
                                            restrict="0-9"/>
                                        <mx:Label text="to"/>
                                        <mx:TextInput id="to_txt"
                                            text="20"
                                            restrict="0-9"/>
                                    </mx:HBox>
                                    <mx:Button x="10"
                                        y="132"
                                        label="executeQuery"
                                        click="executeQuery()"/>
                                    <mx:DataGrid id="queryResult"
                                        width="100%"
                                        height="100%">
                                        <mx:columns>
                                            <mx:DataGridColumn dataField="firstName"
                                                headerText="firstName"/>
                                            <mx:DataGridColumn dataField="lastName"
                                                headerText="lastName"/>
                                            <mx:DataGridColumn dataField="title"
                                                headerText="title"/>
                                            <mx:DataGridColumn dataField="hireDate"
                                                headerText="hireDate"
                                                labelFunction="dateFunction"/>
                                        </mx:columns>
                                    </mx:DataGrid>
                                </mx:VBox>
                            </mx:TabNavigator>

                        </mx:Canvas>

                        <!--<mx:VBox label="Google Map">
                        <mx:HBox height="25" width="100%">
                        <mx:Label text="Enter address: "/>
                        <mx:TextInput dropShadowColor="0" enter="{this.doFlyTo(event);}" id="address" text="Shang Hai"/>
                        <mx:Button click="{this.doFlyTo(event);}" id="submitButton" label="Search"/>
                        <mx:Spacer width="100%"/>
                        <mx:Button click="{this.createMarker();}" enabled="false" id="createLocation" label="Create" toolTip="Create My Location Marker"/>
                        <mx:Button click="{this.modifyMarker();}" enabled="false" id="modifyLocation" label="Modify" toolTip="Modify My Location Marker"/>
                        <mx:Button click="{this.saveMarker();}" enabled="false" id="saveLocation" label="Save" toolTip="Save My Location Marker"/>
                        <mx:Button click="{this.deleteMarker();}" enabled="false" id="deleteLocation" label="Delete" toolTip="Delete My Location Marker"/>
                        </mx:HBox>
                        <mx:Map3D ="{this.onMapPreinitialize(event);}" height="100%" id="map" key="ABQIAAAAzX6WJbyGuc9C2ux_QYzOjxQrMkUOuJi-5OEy5HnG140KTF20wRQ7JqCFsvBvG0Y_ySYWmCMDSmgwtw" mapevent_mapready="{this.onMapReady(event);}" width="100%"/>
                        </mx:VBox>-->
                        <mx:VBox creationComplete="{initResource()}" id="resourceContainer" label="Resource"/>
                        <mx:VBox label="Selection Test">
                            <components:AntSelectionContainer/>
                        </mx:VBox>

                        <!--
                        | Fileshare pod
                        -->
                        <!--<mx:Canvas label="FileShare" width="100%" height="100%">
                        <rtc:FileShare left="0" right="0" top="0" bottom="0"/>
                        </mx:Canvas>-->
                    </mx:ViewStack>
                </mx:HBox>
                <components:SoundPlayer right="0" bottom="0"/>
            </mx:VBox>
        </rtc:ConnectSessionContainer>
    </mx:Panel>
</mx:Application>
