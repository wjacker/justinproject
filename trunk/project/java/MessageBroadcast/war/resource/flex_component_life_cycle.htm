<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11">
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
	<meta name="google-site-verification" content="r-S0PR0qD8l8d8ITaMkeiC5hhkmGfuYgeH3s4C5n_5g" />
	<meta name="msvalidate.01" content="24576EC8E4D1C48C43B2C962E1B6B601" />
	<meta name="y_key" content="2872dee3a70e6a8f" />
	<meta name="blogcatalog" content="9BC9841846" />

	<title>Flex Component Life Cycle with code samples | Blogagic</title>
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0 - all posts" href="http://blogagic.com/feed" />
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0 - all comments" href="http://blogagic.com/comments/feed" />
	<link rel="pingback" href="http://blogagic.com/xmlrpc.php" />

	<!-- style START -->
	<!-- default style -->
	<style type="text/css" media="screen">@import url( http://blogagic.com/wp-content/themes/iBlogagic/style.css );</style>
	<!-- for translations -->
		<!--[if IE]>
		<link rel="stylesheet" href="http://blogagic.com/wp-content/themes/iBlogagic/ie.css" type="text/css" media="screen" />
	<![endif]-->
	<!-- style END -->

	<!-- script START -->
	<script type="text/javascript" src="http://blogagic.com/wp-content/themes/iBlogagic/js/base.js"></script>
	<script type="text/javascript" src="http://blogagic.com/wp-content/themes/iBlogagic/js/menu.js"></script>
	<!-- script END -->

					
	<!-- Google Analytics for WordPress by Yoast v4.0 | http://yoast.com/wordpress/google-analytics/ -->
	<script type="text/javascript">//<![CDATA[
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount','UA-16347457-2']);
	_gaq.push(['_trackPageview']);
	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
	//]]></script>
	<!-- End of Google Analytics for WordPress by Yoast v4.0 -->
<link rel="alternate" type="application/rss+xml" title="Blogagic &raquo; Flex Component Life Cycle Comments Feed" href="http://blogagic.com/18/flex-component-life-cycle/feed" />
<link rel='stylesheet' id='gdsr_style_main-css'  href='http://blogagic.com/wp-content/plugins/gd-star-rating/css/gdsr.css.php?t=1278962146&amp;s=a05i05m20k20c05r05%2312%2312%23s1poxygen%23s1goxygen_gif%23s1pstarscape%23t1pstarrating%23lsgsnake%23lsgflower&amp;o=off&#038;ver=1.9.3' type='text/css' media='' />
<link rel='stylesheet' id='gdsr_style_xtra-css'  href='http://blogagic.com/wp-content/gd-star-rating/css/rating.css?ver=1.9.3' type='text/css' media='' />
<link rel='stylesheet' id='wp-email-css'  href='http://blogagic.com/wp-content/plugins/wp-email/email-css.css?ver=2.50' type='text/css' media='all' />
<link rel='stylesheet' id='contact-form-7-css'  href='http://blogagic.com/wp-content/plugins/contact-form-7/styles.css?ver=2.3' type='text/css' media='all' />
<link rel='stylesheet' id='sexy-bookmarks-css'  href='http://blogagic.com/wp-content/plugins/sexybookmarks/css/style.css?ver=3.2.3.1' type='text/css' media='all' />
<script type='text/javascript' src='http://blogagic.com/wp-includes/js/jquery/jquery.js?ver=1.3.2'></script>
<script type='text/javascript' src='http://blogagic.com/wp-content/plugins/gd-star-rating/js/gdsr.js?ver=1.9.3'></script>
<link rel='index' title='Blogagic' href='http://blogagic.com' />
<link rel='start' title='Blogagic is online!' href='http://blogagic.com/7/blogagic-is-online' />
<link rel='prev' title='The Blogagic Custom Flex Preloader' href='http://blogagic.com/14/the-blogagic-custom-flex-preloader' />
<link rel='next' title='The Blogagic Flex Explorer Collection' href='http://blogagic.com/50/the-blogagic-flex-explorer-collection' />
<link rel='canonical' href='http://blogagic.com/18/flex-component-life-cycle' />

<!-- All in One SEO Pack 1.6.12.1 by Michael Torbert of Semper Fi Web Design[589,638] -->
<meta name="description" content="Description of the Flex Component life cycle. Code samples are provided to illustrate the different patterns involved in the Flex Component life cycle." />
<meta name="keywords" content="flex, custom component, life cycle, action script, mxml, tutorial" />
<!-- /all in one seo pack -->

<!-- Bad Behavior 2.0.38 run time: 3.248 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1279244833 202.181.239.181';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<script type="text/javascript">
//<![CDATA[
var gdsr_cnst_nonce = "d7d7a0e462";
var gdsr_cnst_ajax = "http://blogagic.com/wp-content/plugins/gd-star-rating/ajax.php";
var gdsr_cnst_button = 0;
var gdsr_cnst_cache = 0;
jQuery(document).ready(function() { jQuery(".comment-reply-link").click(function() { hideshowCmmInt(); }); });
// ]]>
</script>
<!--[if IE]><style type="text/css">.ratemulti .starsbar .gdcurrent { -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=70)"; filter: alpha(opacity=70); }</style><![endif]-->
<link type="text/css" rel="stylesheet" href="http://blogagic.com/wp-content/plugins/simple-pull-quote/css/simple-pull-quote.css" />
<style type="text/css">
.sharepost{
border:1px solid #E8E8E8;
position:fixed;
background:#fff; 
width: 60px; 
left: 0; margin: 0 0px 0 20px; 
top: 142px; }
.sharer{
	padding: 5px;
	border-bottom: 1px solid #e8e8e8;
}
</style>
		<style type="text/css">
						ol.footnotes li {list-style-type:decimal;}
						ol.footnotes{font-size:0.8em; color:#666666;}		</style>
			<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
</head>


<body>
<!-- wrap START -->
<div id="wrap">

<!-- container START -->
<div id="container"  >

<!-- header START -->
<div id="header">

	<!-- banner START -->
		<!-- banner END -->

	<div id="caption">
		<a href="http://blogagic.com/"><img class="alignleft" src="http://blogagic.com/wp-content/themes/iBlogagic/img/logoblogagic.png" alt="Blogagic" /></a>
		<div id="title"><a href="http://blogagic.com/">Blogagic</a></div>
		<div id="tagline">Flex Development and User Interface Design tricks and tips</div>
	</div>

	<div class="fixed"></div>
</div>
<!-- header END -->

<!-- navigation START -->
<div id="navigation">
	<!-- menus START -->
	<ul id="menus">
		<li class="page_item"><a class="home" title="Home" href="http://blogagic.com/">Home</a></li>
		<li class="page_item page-item-82"><a href="http://blogagic.com/flex-tool-box" title="Flex Tool Box">Flex Tool Box</a></li>
<li class="page_item page-item-194"><a href="http://blogagic.com/contact" title="Contact">Contact</a></li>
<li class="page_item page-item-5"><a href="http://blogagic.com/about-blogagic" title="About Blogagic">About Blogagic</a></li>
		<li><a class="lastmenu" href="javascript:void(0);"></a></li>
	</ul>
	<!-- menus END -->

	<!-- searchbox START -->
	<div id="searchbox">
					<form action="http://blogagic.com" method="get">
				<div class="content">
					<input type="text" class="textfield" name="s" size="24" value="" />
					<input type="submit" class="button" value="" />
				</div>
			</form>
			</div>
<script type="text/javascript">
//<![CDATA[
	var searchbox = MGJS.$("searchbox");
	var searchtxt = MGJS.getElementsByClassName("textfield", "input", searchbox)[0];
	var searchbtn = MGJS.getElementsByClassName("button", "input", searchbox)[0];
	var tiptext = "Type text to search here...";
	if(searchtxt.value == "" || searchtxt.value == tiptext) {
		searchtxt.className += " searchtip";
		searchtxt.value = tiptext;
	}
	searchtxt.onfocus = function(e) {
		if(searchtxt.value == tiptext) {
			searchtxt.value = "";
			searchtxt.className = searchtxt.className.replace(" searchtip", "");
		}
	}
	searchtxt.onblur = function(e) {
		if(searchtxt.value == "") {
			searchtxt.className += " searchtip";
			searchtxt.value = tiptext;
		}
	}
	searchbtn.onclick = function(e) {
		if(searchtxt.value == "" || searchtxt.value == tiptext) {
			return false;
		}
	}
//]]>
</script>
	<!-- searchbox END -->

	<div class="fixed"></div>
</div>
<!-- navigation END -->

<!-- content START -->
<div id="content">

	<!-- main START -->
	<div id="main">


<!-- Remplacement par postnavi
	<div id="postpath">
		<a title="Go to homepage" href="http://blogagic.com/">Home</a>
		 &gt; <a href="http://blogagic.com/cat/flex" title="View all posts in Flex" rel="category tag">Flex</a>,  <a href="http://blogagic.com/cat/flex/tutorial" title="View all posts in Tutorial" rel="category tag">Tutorial</a>		 &gt; Flex Component Life Cycle	</div>
-->
	<div id="postnaviup">
		<span class="prev"><a href="http://blogagic.com/50/the-blogagic-flex-explorer-collection" rel="next" title="Read: The Blogagic Flex Explorer Collection">The Blogagic Flex Explorer Collection</a></span>
		<span class="next"><a href="http://blogagic.com/14/the-blogagic-custom-flex-preloader" rel="prev" title="Read: The Blogagic Custom Flex Preloader">The Blogagic Custom Flex Preloader</a></span>
		<div class="fixed"></div>
	</div>
	
	<div class="post" id="post-18">
		<div class="postheader">
			<h1>Flex Component Life Cycle</h1>			
			<div class="info">
				<span class="date">May 22nd, 2010</span>
																	<span class="addcomment">
						<a href="#respond" title="Participate by commenting on this topic">
							Leave a comment						</a>
					</span>
					<span class="comments">
						<a href="#comments" title="See what readers said about this topic">
							Read comments (0)						</a>
					</span>					
								<div class="fixed"></div>
			</div>
		</div>
		<div class="content">
			<p>Now that we have a nice looking Preloader, we&#8217;re close to be ready starting developing new Flex Custom Components.</p>
<p>Anyway, before doing so, we need to clearly understand what is the Flex Component Life Cycle. A good understanding of this Life Cycle is really mandatory to be able to develop &#8220;correctly&#8221; a Flex Custom Component.</p>
<p>Code extracts are provided to illustrate the different principles discussed below, use the &#8220;<em>See code sample</em>&#8221; links to look at them, use the &#8220;<em>See explanations</em>&#8221; links to come back to the explanations.</p>
<p><span id="more-18"></span></p>
<p>The Flex Component Life Cycle can be defined as the mechanism used by the Flex framework to manage components during their life as part of an application. To be more precise, this Life Cycle applies to objects inheriting from <code>UIComponent</code>.  <code>UIComponent</code> is the base class of all graphical objects that can be rendered on the screen and manipulated by users.</p>
<p>The <code>UIComponent</code> Life Cycle is composed of the following phases:</p>
<ul>
<li><a title="Construction phase of the Flex Component Life Cycle" href="http://blogagic.com/18/flex-component-life-cycle#construction" >Construction</a></li>
<li><a title="Attachment phase of the Flex Component Life Cycle" href="http://blogagic.com/18/flex-component-life-cycle#attachment" >Attachment</a></li>
<li><a title="Initialization phase of the Flex Component Life Cycle" href="http://blogagic.com/18/flex-component-life-cycle#initialization" >Initialization</a></li>
<li><a title="Invalidation / Validation phase of the Flex Component Life Cycle" href="http://blogagic.com/18/flex-component-life-cycle#invalidation" >Invalidation / Validation</a>
<ul>
<li><a title="Invalidation / Validation: properties changes" href="http://blogagic.com/18/flex-component-life-cycle#propertieschanges" >Properties changes</a></li>
<li><a title="Invalidation / Validation: sizing changes" href="http://blogagic.com/18/flex-component-life-cycle#sizingchanges" >Sizing changes</a></li>
<li><a title="Invalidation / Validation: drawing &amp; positioning changes" href="http://blogagic.com/18/flex-component-life-cycle#drawingchanges" >Drawing &amp; Positioning changes</a></li>
</ul>
</li>
<li><a title="Detachment phase of the Flex Component Life Cycle" href="http://blogagic.com/18/flex-component-life-cycle#detachment" >Detachment</a></li>
<li><a title="Destruction phase of the Flex Component Life Cycle" href="http://blogagic.com/18/flex-component-life-cycle#destruction" >Destruction</a></li>
</ul>
<p>The following code samples illustrate the patterns and principles of the <code>UIComponent</code> Life Cycle:</p>
<ul>
<li><a title="Look at code extracts illustrating the patterns and principles described below" href="http://blogagic.com/18/flex-component-life-cycle#codeextracts" >Flex Component Life Cycle Code Extracts</a>
<ul>
<li><a title="Constructor code sample" href="http://blogagic.com/18/flex-component-life-cycle#constructor" >constructor</a></li>
<li><a title="createChildren() code sample" href="http://blogagic.com/18/flex-component-life-cycle#createchildren" ><code>createChildren()</code></a></li>
<li><a title="Property change code sample" href="http://blogagic.com/18/flex-component-life-cycle#propertychange" >property change (setters, <code>invalidateProperties()</code> and <code>commitProperties()</code>)</a></li>
<li><a title="Sizing change code sample" href="http://blogagic.com/18/flex-component-life-cycle#sizingchange" >sizing change (<code>invalidateSize()</code> and <code>measure()</code>)</a></li>
<li><a title="Drawing &amp; positioning change code sample" href="http://blogagic.com/18/flex-component-life-cycle#drawingchange" >drawing and positioning change (<code>invalidateDisplayList()</code> and <code>updateDisplayList()</code>)</a></li>
</ul>
</li>
</ul>
<h2><a name="construction"></a>Construction<span style="font-size: x-small;"> <span style="font-size: small;">( <a title="Flex constructor example" href="http://blogagic.com/18/flex-component-life-cycle#constructor" >see code sample</a> )</span></span></h2>
<p style="padding-left: 30px;">Construction is the first phase of a component and starts when the component&#8217;s constructor is called.</p>
<p style="padding-left: 30px;">We all know what is a constructor and what&#8217;s its purpose. But, in Flex, there are a few specific points that are very important to know and understand.</p>
<h3 style="padding-left: 30px;">Call super(): constructor rule #1</h3>
<p style="padding-left: 30px;">Even if it isn&#8217;t really mandatory (because the compiler will do it for you), it&#8217;s always better to call the constructor of your super class explicitly by calling <code>super()</code>.</p>
<h3 style="padding-left: 30px;">Zero argument: constructor rule #2</h3>
<p style="padding-left: 30px;">The constructor <strong>must </strong>have zero required arguments. The reason behind this rule is that components can be instantiated either from Action Script or from MXML. When creating a component from an MXML file, it is not possible to provide any parameter to the constructor.</p>
<p style="padding-left: 30px;">So, if you want that your components can be used from MXML, stick to the rule!</p>
<h3 style="padding-left: 30px;">As little work and calculation as possible: constructor rule #3</h3>
<p style="padding-left: 30px;">In contrary to many other languages, the Flex constructors shouldn&#8217;t be used for initializing or building the component&#8217;s pieces.</p>
<p style="padding-left: 30px;">The reasons behind this rule are that, when the constructor is called, the component is far from being ready for configuration. Some of its properties are probably not yet created, none if its children components is created, some properties or styles could be changed by a subclass and the constructor code will never benefit from the Just-In-Time compilation process!</p>
<p style="padding-left: 30px;">The constructor can be used to add event listeners or hard code some properties, but you should not put more here; do as little work and calculation in your constructors.</p>
<h2><a name="attachment"></a>Attachment</h2>
<p style="padding-left: 30px;">Attachment is the next phase of a component and starts when the component is added to a parent component using <code>addChild()</code>. This is where the component is added in the Display List.</p>
<p style="padding-left: 30px;">When the component is attached, three main steps occur:</p>
<ul style="padding-left: 30px;">
<li><code>addingChild()</code>: child&#8217;s <code>parent</code> and <code>document</code> reference are set, <code>LayoutManager</code> is defined and style management is initialized.</li>
<li><code>$addChild()</code>: this Flash Player method adds the component to the Display List.</li>
<li><code>childAdded()</code>: determines if the component has already been initialized, if not it triggers the next phase by calling <code>initialize()</code>.</li>
</ul>
<h2><a name="initialization"></a>Initialization<span style="font-size: small;"> ( <a title="See a createChildren() code sample" href="http://blogagic.com/18/flex-component-life-cycle#createchildren" >see code sample</a> )</span></h2>
<p style="padding-left: 30px;">Initialization phase of a component creates the children of the component and prepare it for the first Invalidation / Validation cycle.</p>
<p style="padding-left: 30px;">When the component is initialized, five main steps occur:</p>
<ul style="padding-left: 30px;">
<li><code>FlexEvent.PREINITIALIZED</code> event is dispatched.</li>
<li><code>createChildren()</code> is called.</li>
<li><code>FlexEvent.INITIALIZED</code> event is dispatched.</li>
<li>First Invalidation / Validation cycle.</li>
<li><code>FlexEvent.CREATION_COMPLETE</code> event is dispatched.</li>
</ul>
<p style="padding-left: 30px;">As for the constructor, it is mandatory to understand in details what can be done, or not, in the <code>createChildren()</code> method.</p>
<p style="padding-left: 30px;">This is the best place for adding children components that are required <strong>for the whole lifetime </strong>of the component. The children created dynamically or that are data-driven must not be created here but in the <code>commitProperties()</code> as we&#8217;ll see later.</p>
<p style="padding-left: 30px;">Before instantiating a child component, always check if it doesn&#8217;t already exist to avoid multiple unnecessary creations to occur when <code>createChildren()</code> is called in a different scenario (re-parenting case for example).</p>
<p style="padding-left: 30px;">Stick to the following pattern when creating your children:</p>
<ul style="padding-left: 30px;">
<li>Creation (using the <code>new operator)</code></li>
<li>Configuration (setting child properties)</li>
<li>Attachment (calling <code>addChild()</code>)</li>
</ul>
<p style="padding-left: 30px;">Please note that calling addChild() with one of your child starts the child <a title="addChild triggers the Attachement phase of the child" href="http://blogagic.com/18/flex-component-life-cycle#attachment" >Life Cycle Attachment phase </a>that, in turn, can trigger creation of children of your child.</p>
<h2><a name="invalidation"></a>Invalidation / Validation</h2>
<p style="padding-left: 30px;">Invalidation / Validation phase is a phase that will get repeated many times during the component&#8217;s life. It is, in fact, more than a phase, it&#8217;s a cycle on its own.</p>
<p style="padding-left: 30px;">The full cycle looks like:</p>
<ul style="padding-left: 30px;">
<li>Update phase:<br />
triggered whenever the user interacts with the components or when methods or properties are invoked/set.</li>
<li>Invalidation phase:<br />
triggered by the component methods after having changed its state or properties to implement the request from the user or the other component. It just informs the framework that we have some dirty data to be validated before rendering the component.</li>
<li>Validation phase:<br />
triggered by the Flex framework just before the Rendering phase. This is where the changes done in the previous step must be applied to the graphical elements of the component.</li>
<li><code>FlexEvent.UPDATE_COMPLETE</code> event is dispatched</li>
<li>Rendering phase</li>
</ul>
<p style="padding-left: 30px;">This cycle is one of the most important aspect of Flex so let&#8217;s dig into more details. This cycle provides a decoupling process that separates the value changes (Invalidation, i.e. making the old value no longer valid) and the new values processing (Validation, i.e. applying the new values).  This decoupling enforces defers the processing associated to value changes to the last moment: just before rendering the component. It helps avoiding multiple unnecessary processing as you can often find in many softwares.</p>
<p style="padding-left: 30px;">For example, changing the width of the component can lead to heavy processing (since layout would be updated, leading to an update of the children width that would in turn trigger a layout update, &#8230;). If your suboptimal code would change the width twice in the same method, the heavy processing would be executed twice. With the Invalidation / Validation model, this would just invalidate the width twice, but the processing done in Validation would still be executed only once.</p>
<p style="padding-left: 30px;">In other words: whenever the component decides to change any of its graphical characteristics, the Invalidation / Validation cycle <strong>must </strong>be used.</p>
<p style="padding-left: 30px;">The Invalidation / Validation model is split into three  steps corresponding to three pairs of methods:</p>
<ul style="padding-left: 30px;">
<li>Properties changes: <code>invalidateProperties()</code> =&gt; <code>commitProperties()</code></li>
<li>Sizing changes: <code>invalidateSize()</code> =&gt; <code>measure()</code></li>
<li>Drawing &amp; Positioning changes: <code>invalidateDisplayList()</code> =&gt; <code>updateDisplayList()</code></li>
</ul>
<h3 style="padding-left: 30px;"><a name="propertieschanges"></a>Properties changes<span style="font-size: small;"> ( <a title="See a property change code sample" href="http://blogagic.com/18/flex-component-life-cycle#propertychange" >see code sample</a> )</span></h3>
<p style="padding-left: 30px;">To manage properties changes in the Flex-way, you must follow a simple pattern inside your setters relying on dirty flags and storage variables.</p>
<p style="padding-left: 30px;">Don&#8217;t change any property directly, store the new value in a private storage variable instead and position a dirty flag indicating that the property is dirty (this principle applies to properties that have an impact on your component graphical representation).</p>
<p style="padding-left: 30px;">Once done, just call the <code>invalidateProperties()</code> method and let the framework do its job.</p>
<p style="padding-left: 30px;">During the Validation phase, inside the <code>commitProperties()</code> method, update the graphical properties using your private variables and reset the corresponding dirty flags.</p>
<p style="padding-left: 30px;">The <code>commitProperties()</code> method is also the right place to add or remove children that aren&#8217;t required through the whole component life cycle (dynamic or data-driven children).</p>
<p style="padding-left: 30px;">It should be noted that the properties mentioned here are the ones that are used by a component when computing its size or layout. If a given property doesn&#8217;t impact size or layout of the component, it can be updated without using the Invalidation / Validation pattern.</p>
<h3 style="padding-left: 30px;"><a name="sizingchanges"></a>Sizing changes <span style="font-size: small;">( <a title="See a sizing change code sample" href="http://blogagic.com/18/flex-component-life-cycle#sizingchange" >see code sample</a> )</span></h3>
<p style="padding-left: 30px;">The principle described above for the Properties is applicable also to sizing changes. A typical case is when the styles associated to a component are modified. The <code>styleChanged()</code> method can be used to check whether the style changes are impacting the component size and, if it&#8217;s the case, call the <code>invalidateSize()</code> method.</p>
<p style="padding-left: 30px;">Then, the processing to update the component size based on content and layout rules has to be done inside the <code>measure()</code> method. There are four properties that needs to be set: <code>measuredWidth</code>, <code>measuredHeight</code>, <code>measuredMinWidth</code> and <code>measuredMinHeight</code>.</p>
<p style="padding-left: 30px;">It should be noted that sizing is determined from bottom to top, meaning that this will be implicitly triggered when a component child is resized.</p>
<p style="padding-left: 30px;">Another important point to notice concerns the way to retrieve the children width or height. Don&#8217;t use their width and height properties directly but, instead, use <code>getExplicitOrMeasuredWidth()</code> or <code>getExplicitOrMeasuredHeight()</code> methods (for child of type <code>UIComponent</code>).</p>
<h3 style="padding-left: 30px;"><a name="drawingchanges"></a>Drawing &amp; Positioning changes <span style="font-size: small;">( <a title="See a drawing and positioning change code sample" href="http://blogagic.com/18/flex-component-life-cycle#drawingchange" >see code sample</a> )</span></h3>
<p style="padding-left: 30px;">The third category concerned by the Invalidation / Validation cycle is the drawing and positioning step that involves the two methods: <code>invalidateDisplayList()</code> and <code>updateDisplayList()</code>.</p>
<p style="padding-left: 30px;">Whenever a change in the component affects the way it&#8217;s drawn or positioned, just call invalidateDisplayList() to ensure that the <code>updateDisplayList()</code> method be called just before the rendering on screen phase.</p>
<p style="padding-left: 30px;">The <code>updateDisplayList()</code> method is where the component is laid out.Size and position of each child (of type <code>UIComponent</code>) must be defined by calling their <code>setActualSize()</code> and <code>move()</code> methods . In contrary to a direct update of their <code>x</code>, <code>y</code>, <code>width</code> or <code>height</code> properties, <code>setActualSize()</code> and <code>move()</code> methods are aggregating the changes such that only one event is dispatched even if both <code>x</code> and <code>y</code> or <code>width</code> and <code>height</code> values are changed.  If the child isn&#8217;t a <code>UIComponent</code>, you can then change directly the <code>x</code>, <code>y</code>, <code>width</code> or <code>height</code> properties.</p>
<p style="padding-left: 30px;">It&#8217;s also quite common using the Flash Player drawing API in <code>updateDisplayList()</code>.</p>
<h2><a name="detachment"></a>Detachment</h2>
<p style="padding-left: 30px;">Detachment is one of last phase of a component and starts when the component is removed from a parent component using <code>removeChild()</code>. This is where the component is removed from the Display List.</p>
<p style="padding-left: 30px;">When the component is detached, three main steps occur:</p>
<ul style="padding-left: 30px;">
<li><code>removingChild()</code>: does nothing by default, can be overridden to do something before the component is removed from the display list.</li>
<li><code>$removeChild()</code>: this Flash Player method removes the component from the Display List and checks if it still has any reference. If there are none, the component is marked for garbage collection.</li>
<li><code>childRemoved()</code>: removes references to the components <code>parent</code> and <code>document</code> properties.</li>
</ul>
<p style="padding-left: 30px;">The Invalidation / Validation cycle won&#8217;t occur anymore for a detached component.</p>
<p style="padding-left: 30px;">Keeping a reference to a component before detaching it will keep it alive, allowing to re-parent it (i.e. attaching it to another parent component) that is more efficient than re-instantiating a new component.</p>
<h2><a name="destruction"></a>Destruction</h2>
<p style="padding-left: 30px;">Components marked for garbage collection are really destroyed (i.e. removed from memory) only when a garbage collection phase occurs. The garbage collection is fully handled by the Flash Player and you should never try to force it from your own code.</p>
<p style="padding-left: 30px;">Anyway, there are common pitfalls leading to memory leaks because components aren&#8217;t deleted. The most common problems are with event listeners, dictionaries and timers that still maintain references to the component. So, whenever you want a component to die, don&#8217;t forget to make cleanup of any event listener, dictionary or timer that was referring to the component.</p>
<h2><a name="codeextracts"></a>Flex Component Life Cycle Code Extracts</h2>
<p style="padding-left: 30px;">Here are some code extracts illustrating the different patterns and principles described above. You should be able to navigate easily between these extracts and the related explanations by using the &#8220;<em>See explanations</em>&#8221; and &#8220;<em>See sample</em>&#8221; links.</p>
<h3 style="padding-left: 30px;"><a name="constructor"></a>constructor ( <a title="Explanations on the Construction phase" href="http://blogagic.com/18/flex-component-life-cycle#construction" >see explanations</a> )</h3>
<pre class="brush: as3">
//--------------------------------------------------------------------------
//
//  Constructor
//
// Rules:
//		call super()
//		0 required arguments (such that it can be used from MXML)
// 		as light as possible
//
//--------------------------------------------------------------------------
public function MyClass()
{
	super();

	// Minimal processing recommended.
	// Can hardcode some properties and add event listeners, but not more
	//
	//Example:
	addEventListener(FlexEvent.CREATION_COMPLETE, creationCompleteHandler);
}
</pre>
<h3 style="padding-left: 30px;"><code><a name="createchildren"></a>createChildren()</code>( <a title="Explanations on the Initialization phase" href="http://blogagic.com/18/flex-component-life-cycle#initialization" >see explanations</a> )</h3>
<pre class="brush: as3">
//--------------------------------------------------------------------------
//
// createChildren
//
// Place to create static composited components (the ones having the same
// life duration as the component). For dynamic and data-driven children,
// manage them in commitProperties().
//
// Rules:
//		call super()
//		check for child availability before creating it
//		follow the create, configure, listen, attach pattern for all children
//
//--------------------------------------------------------------------------

override protected function createChildren():void
{
	super.createChildren();

	// Before creating a child, check if it doesn't already exist
	if (!myChild) {
		// Create the child
		myChild = new MyChild();

		// Configure the child
		myChild.property = value;

		// Manage child event listeners
		myChild.addEventListener(MouseEvent.CLICK, onClickHandler);

		// Attach the child
		addChild(myChild);
	}
}
</pre>
<h3 style="padding-left: 30px;"><a name="propertychange"></a>property change (setters, <code>invalidateProperties()</code> and <code>commitProperties()</code>) ( <a title="Explanations on the Properties changes" href="http://blogagic.com/18/flex-component-life-cycle#propertieschanges" >see explanations</a> )</h3>
<pre class="brush: as3">
//--------------------------------------------------------------------------
//
// Property setter and getter
//
// For properties having a influence on the component size, layout or drawing,
// use the Invalidation / Validation principle.
//
// Rules:
//		check if value is really changing
//		use storage variable
//		use dirty flag
//		associate your own event to bindable properties
//
//--------------------------------------------------------------------------

private var _myProperty:String = &quot;&quot;;
private var myPropertyChanged:Boolean;
[Bindable(&quot;myPropertyChanged&quot;)]

public function get myProperty():String
{
    return _myProperty;
}

public function set myProperty(value:String):void
{
	// Check if value is really a change
    if (_myProperty != value)
    {
    	// Keep in storage variable
        _myProperty = value;
        // Set dirty flag
        myPropertyChanged = true;
        // Indicate the Invalidation by calling invalidateProperties or invalidateSize or invalidateDisplayList
        invalidateProperties();
        // Dispatch event for bindable properties
        dispatchEvent(new Event(&quot;myPropertyChanged&quot;));
    }
}

//--------------------------------------------------------------------------
//
// commitProperties
//
// Manage properties changes indicated by dirtyFlags. Create or Delete
// dynamic children if required.
//
// Rules:
//		call super
//		check dirtyFlag to see if validation is needed or not
//		use storage variable to commit the new value
//		reset dirty flag
//
//--------------------------------------------------------------------------

override protected function commitProperties():void
{
	super.commitProperties();

	// Check if our property is dirty or not
	if (myPropertyChanged)
	{
		// Commit the new value using the storage variable
		myChild.text = _myProperty;

		// Reset dirty flag
		myPropertyChanged = false;
	}
	// If needed, create or delete dynamic children based on a property change
}
</pre>
<h3 style="padding-left: 30px;"><a name="sizingchange"></a>sizing change (<code>invalidateSize()</code> and <code>measure()</code>) ( <a title="Explanations on the Sizing changes" href="http://blogagic.com/18/flex-component-life-cycle#sizingchanges" >see explanations</a> )</h3>
<pre class="brush: as3">
//--------------------------------------------------------------------------
//
// Style changes
//
// For properties having a influence on the component size, layout or drawing,
// use the Invalidation / Validation principle.
//
// Rules:
//		call super
//		check if style change impacts the component and trigger the right
//      invalidation method accordingly
//
//--------------------------------------------------------------------------

override public function styleChanged(styleProp:String):void
{
	super.styleChanged(styleProp);

	// Check the changed property
	if (styleProp == &quot;myStyleProperty&quot;)
	{
		// Trigger corresponding invalidation methods
		invalidateSize();			// When size of the component is impacted by the new style value
		invalidateDisplayList();	// When drawing of the component is impacted by the new style value
	}
}

//--------------------------------------------------------------------------
//
// measure
//
// Compute measuredWidth/Height and optionally MeasuredMinWidth/Height.
//
// Rules:
//		call super
//		use getExplicitOrMeasuredWidth/Height to access child measures
//
//--------------------------------------------------------------------------

override protected function measure():void
{
	super.measure();

	// Calculate the size of the component and set measuredWidth and measuredHeight
	var myMargin:Number = getStyle(&quot;myMargin&quot;);
	if (!myMargin)
		myMargin = 5;

	// Here we have two children on top of each other so our width is the max of the
	// children's width and our height is the sum of the children's height + the margin.
	measuredWidth = Math.max(myChild1.getExplicitOrMeasuredWidth(), myChild2.getExplicitOrMeasuredWidth) + 2*myMargin;
	measuredHeight = myChild1.getExplicitOrMeasuredHeight() + myChild2.getExplicitOrMeasuredHeight() + 3*myMargin;

	// Min is often set to the measured values
	measuredMinWidth = measuredWidth;
	measuredMinHeight = measuredHeight;
}
</pre>
<h3 style="padding-left: 30px;"><a name="drawingchange"></a>drawing &amp; positioning change (<code>invalidateDisplayList()</code> and <code>updateDisplayList()</code>) ( <a title="Explanations on the Drawing &amp; Dimensioning changes" href="http://blogagic.com/18/flex-component-life-cycle#drawingchanges" >see explanations</a> )</h3>
<pre class="brush: as3">
//--------------------------------------------------------------------------
//
// updateDisplayList
//
// Position and layout the children component. Use the Flash Player drawing
// API.
//
// Rules:
//		call super
//		call setActualSize on children to change their size
//		call move on children to change their position
//
//--------------------------------------------------------------------------

override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
{
	super.updateDisplayList(unscaledWidth, unscaledHeight);

	// Position &amp; Resize your children using move and setActualSize
	if (child1)
	{
		// Suppose we have just one child taking all the available area
    	child.move(0, 0);
    	child.setActualSize(unscaledWidth, unscaledHeight);
	}

	// Do some drawing using the Flash Player API
	graphics.clear();
	graphics.beginFill(0x00FF00);
	graphics.drawRect(0,0,unscaledWidth,usedHeight);
	graphics.endFill();
}
</pre>
<div style="display: none">VN:F [1.9.3_1094]</div><div class="ratingblock "><div class="ratingheader "></div><div class="ratingstars "><div id="article_rater_18" class="ratepost gdsr-oxygen gdsr-size-12"><div class="starsbar gdsr-size-12"><div class="gdouter gdheight"><div id="gdr_vote_a18" style="width: 60px;" class="gdinner gdheight"></div><div id="gdr_stars_a18" class="gdsr_rating_as"><a id="gdsrX18X5X0XaXarticle_rater_18Xarticle_loader_18X10X12" title="5 / 5" class="s5" rel="nofollow"></a><a id="gdsrX18X4X0XaXarticle_rater_18Xarticle_loader_18X10X12" title="4 / 5" class="s4" rel="nofollow"></a><a id="gdsrX18X3X0XaXarticle_rater_18Xarticle_loader_18X10X12" title="3 / 5" class="s3" rel="nofollow"></a><a id="gdsrX18X2X0XaXarticle_rater_18Xarticle_loader_18X10X12" title="2 / 5" class="s2" rel="nofollow"></a><a id="gdsrX18X1X0XaXarticle_rater_18Xarticle_loader_18X10X12" title="1 / 5" class="s1" rel="nofollow"></a></div></div></div></div><div id="article_loader_18" style="display: none; width: 60px " class="ratingloaderarticle"><div class="loader snake " style="height: 12px"><div class="loaderinner">please wait...</div></div></div></div><div class="ratingtext "><div id="gdr_text_a18">Rating: 5.0/<strong>5</strong> (2 votes cast)</div></div></div><span class="hreview-aggregate" style="display: none !important;"><span class="item"><span class="fn">Flex Component Life Cycle</span></span>, <span class="rating"><span class="average">5.0</span> out of <span class="best">5</span> based on <span class="count">2</span> ratings <span class="summary"></span></span></span>

<div class="shr-bookmarks shr-bookmarks-expand shr-bookmarks-center shr-bookmarks-bg-shr">
<ul class="socials">
		<li class="shr-delicious">
			<a href="http://delicious.com/post?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','delicious.com']);" rel="nofollow" class="external" title="Share this on del.icio.us">&nbsp;</a>
		</li>
		<li class="shr-digg">
			<a href="http://digg.com/submit?phase=2&amp;url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','digg.com']);" rel="nofollow" class="external" title="Digg this!">&nbsp;</a>
		</li>
		<li class="shr-twitter">
			<a href="http://twitter.com/home?status=Flex+Component+Life+Cycle+-+http://bit.ly/ahK7Qh+%28%40blogagic%29&amp;source=shareaholic" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','twitter.com']);" rel="nofollow" class="external" title="Tweet This!">&nbsp;</a>
		</li>
		<li class="shr-googlebookmarks">
			<a href="http://www.google.com/bookmarks/mark?op=add&amp;bkmk=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.google.com']);" rel="nofollow" class="external" title="Add this to Google Bookmarks">&nbsp;</a>
		</li>
		<li class="shr-yahoobuzz">
			<a href="http://buzz.yahoo.com/submit/?submitUrl=http://blogagic.com/18/flex-component-life-cycle&amp;submitHeadline=Flex+Component+Life+Cycle&amp;submitSummary=Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle.&amp;submitCategory=science&amp;submitAssetType=text" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','buzz.yahoo.com']);" rel="nofollow" class="external" title="Buzz up!">&nbsp;</a>
		</li>
		<li class="shr-technorati">
			<a href="http://technorati.com/faves?add=http://blogagic.com/18/flex-component-life-cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','technorati.com']);" rel="nofollow" class="external" title="Share this on Technorati">&nbsp;</a>
		</li>
		<li class="shr-googlebuzz">
			<a href="http://www.google.com/buzz/post?url=http://blogagic.com/18/flex-component-life-cycle&amp;imageurl=" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.google.com']);" rel="nofollow" class="external" title="Post on Google Buzz">&nbsp;</a>
		</li>
		<li class="shr-blinklist">
			<a href="http://www.blinklist.com/index.php?Action=Blink/addblink.php&amp;Url=http://blogagic.com/18/flex-component-life-cycle&amp;Title=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.blinklist.com']);" rel="nofollow" class="external" title="Share this on Blinklist">&nbsp;</a>
		</li>
		<li class="shr-diigo">
			<a href="http://www.diigo.com/post?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle&amp;desc=Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle." onclick="javascript:_gaq.push(['_trackEvent','download','www.diigo.com/post?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle&amp;desc=Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle.']);" rel="nofollow" class="external" title="Post this on Diigo">&nbsp;</a>
		</li>
		<li class="shr-misterwong">
			<a href="http://www.mister-wong.com/addurl/?bm_url=http://blogagic.com/18/flex-component-life-cycle&amp;bm_description=Flex+Component+Life+Cycle&amp;plugin=sexybookmarks" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.mister-wong.com']);" rel="nofollow" class="external" title="Add this to Mister Wong">&nbsp;</a>
		</li>
		<li class="shr-mixx">
			<a href="http://www.mixx.com/submit?page_url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.mixx.com']);" rel="nofollow" class="external" title="Share this on Mixx">&nbsp;</a>
		</li>
		<li class="shr-stumbleupon">
			<a href="http://www.stumbleupon.com/submit?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.stumbleupon.com']);" rel="nofollow" class="external" title="Stumble upon something good? Share it on StumbleUpon">&nbsp;</a>
		</li>
		<li class="shr-reddit">
			<a href="http://reddit.com/submit?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','reddit.com']);" rel="nofollow" class="external" title="Share this on Reddit">&nbsp;</a>
		</li>
		<li class="shr-blogger">
			<a href="http://www.blogger.com/blog_this.pyra?t&amp;u=http://blogagic.com/18/flex-component-life-cycle&amp;n=Flex+Component+Life+Cycle&amp;pli=1" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.blogger.com']);" rel="nofollow" class="external" title="Blog this on Blogger">&nbsp;</a>
		</li>
		<li class="shr-myspace">
			<a href="http://www.myspace.com/Modules/PostTo/Pages/?u=http://blogagic.com/18/flex-component-life-cycle&amp;t=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.myspace.com']);" rel="nofollow" class="external" title="Post this to MySpace">&nbsp;</a>
		</li>
		<li class="shr-gmail">
			<a href="https://mail.google.com/mail/?ui=2&amp;view=cm&amp;fs=1&amp;tf=1&amp;su=Flex+Component+Life+Cycle&amp;body=Link: http://blogagic.com/18/flex-component-life-cycle (sent via shareaholic)%0D%0A%0D%0A----%0D%0A Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle." onclick="javascript:_gaq.push(['_trackEvent','download','mail.google.com/mail/?ui=2&amp;view=cm&amp;fs=1&amp;tf=1&amp;su=Flex+Component+Life+Cycle&amp;body=Link: http://blogagic.com/18/flex-component-life-cycle (sent via shareaholic)%0D%0A%0D%0A----%0D%0A Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle.']);" rel="nofollow" class="external" title="Email this via Gmail">&nbsp;</a>
		</li>
		<li class="shr-hotmail">
			<a href="http://mail.live.com/?rru=compose?subject=Flex+Component+Life+Cycle&amp;body=Link: http://blogagic.com/18/flex-component-life-cycle (sent via shareaholic)%0D%0A%0D%0A----%0D%0A Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle." onclick="javascript:_gaq.push(['_trackEvent','download','mail.live.com/?rru=compose?subject=Flex+Component+Life+Cycle&amp;body=Link: http://blogagic.com/18/flex-component-life-cycle (sent via shareaholic)%0D%0A%0D%0A----%0D%0A Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle.']);" rel="nofollow" class="external" title="Email this via Hotmail">&nbsp;</a>
		</li>
		<li class="shr-yahoomail">
			<a href="http://compose.mail.yahoo.com/?Subject=Flex+Component+Life+Cycle&amp;body=Link: http://blogagic.com/18/flex-component-life-cycle (sent via shareaholic)%0D%0A%0D%0A----%0D%0A Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle." onclick="javascript:_gaq.push(['_trackEvent','download','compose.mail.yahoo.com/?Subject=Flex+Component+Life+Cycle&amp;body=Link: http://blogagic.com/18/flex-component-life-cycle (sent via shareaholic)%0D%0A%0D%0A----%0D%0A Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle.']);" rel="nofollow" class="external" title="Email this via Yahoo! Mail">&nbsp;</a>
		</li>
		<li class="shr-googlereader">
			<a href="http://www.google.com/reader/link?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle&amp;srcUrl=http://blogagic.com/18/flex-component-life-cycle&amp;srcTitle=Flex+Component+Life+Cycle&amp;snippet=Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle." onclick="javascript:_gaq.push(['_trackEvent','download','www.google.com/reader/link?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle&amp;srcUrl=http://blogagic.com/18/flex-component-life-cycle&amp;srcTitle=Flex+Component+Life+Cycle&amp;snippet=Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle.']);" rel="nofollow" class="external" title="Add this to Google Reader">&nbsp;</a>
		</li>
		<li class="shr-dzone">
			<a href="http://www.dzone.com/links/add.html?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle&amp;description=Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle." onclick="javascript:_gaq.push(['_trackEvent','download','www.dzone.com/links/add.html?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle&amp;description=Description%20of%20the%20Flex%20Component%20life%20cycle.%0D%0ACode%20samples%20are%20also%20provided%20to%20illustrate%20the%20different%20patterns%20and%20principles%20involved%20in%20the%20Flex%20Component%20life%20cycle.']);" rel="nofollow" class="external" title="Add this to DZone">&nbsp;</a>
		</li>
		<li class="shr-techmeme">
			<a href="http://twitter.com/home/?status=Tip+@Techmeme+http://blogagic.com/18/flex-component-life-cycle+&quot;Flex+Component+Life+Cycle&quot;&amp;source=shareaholic" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','twitter.com']);" rel="nofollow" class="external" title="Tip this to TechMeme">&nbsp;</a>
		</li>
		<li class="shr-friendfeed">
			<a href="http://www.friendfeed.com/share?title=Flex+Component+Life+Cycle&amp;link=http://blogagic.com/18/flex-component-life-cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.friendfeed.com']);" rel="nofollow" class="external" title="Share this on FriendFeed">&nbsp;</a>
		</li>
		<li class="shr-izeby">
			<a href="http://izeby.com/submit.php?url=http://blogagic.com/18/flex-component-life-cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','izeby.com']);" rel="nofollow" class="external" title="Add this to Izeby">&nbsp;</a>
		</li>
		<li class="shr-jumptags">
			<a href="http://www.jumptags.com/add/?url=http://blogagic.com/18/flex-component-life-cycle&amp;title=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.jumptags.com']);" rel="nofollow" class="external" title="Submit this link to JumpTags">&nbsp;</a>
		</li>
		<li class="shr-propeller">
			<a href="http://www.propeller.com/submit/?url=http://blogagic.com/18/flex-component-life-cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.propeller.com']);" rel="nofollow" class="external" title="Submit this story to Propeller">&nbsp;</a>
		</li>
		<li class="shr-tumblr">
			<a href="http://www.tumblr.com/share?v=3&amp;u=http%3A%2F%2Fblogagic.com%2F18%2Fflex-component-life-cycle&amp;t=Flex+Component+Life+Cycle" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','www.tumblr.com']);" rel="nofollow" class="external" title="Share this on Tumblr">&nbsp;</a>
		</li>
</ul>
<div style="clear:both;"></div>
</div>

			<div class="fixed"></div>
		</div>
		<div class="under">
			<span class="categories">Categories: </span><span><a href="http://blogagic.com/cat/flex" title="View all posts in Flex" rel="category tag">Flex</a>,  <a href="http://blogagic.com/cat/flex/tutorial" title="View all posts in Tutorial" rel="category tag">Tutorial</a></span>			<span class="tags">Tags: </span><span><a href="http://blogagic.com/key/custom-component" title="View all posts related to custom component (4)">custom component</a>, <a href="http://blogagic.com/key/flex" title="View all posts related to Flex (10)">Flex</a>, <a href="http://blogagic.com/key/life-cycle" title="View all posts related to life cycle (1)">life cycle</a>, <a href="http://blogagic.com/key/tutorial" title="View all posts related to Tutorial (5)">Tutorial</a></span>                         <a href="http://blogagic.com/18/flex-component-life-cycle/email/" title="Email This Post" rel="nofollow"><img class="WP-EmailIcon" src="http://blogagic.com/wp-content/plugins/wp-email/images/email.gif" alt="Email This Post" title="Email This Post" style="border: 0px;" /></a>
		</div>
	</div>

	<!-- related posts START -->
		<!-- related posts END -->

	<script type="text/javascript" src="http://blogagic.com/wp-content/themes/iBlogagic/js/comment.js"></script>



<div id="comments">

<div id="cmtswitcher">
			<a id="commenttab" class="curtab" title="Consult comments" href="javascript:void(0);" onclick="MGJS.switchTab('thecomments,commentnavi', 'thetrackbacks', 'commenttab', 'curtab', 'trackbacktab', 'tab');">Comments (0)</a>
		<a id="trackbacktab" class="tab" title="Consult blogs referring to this post" href="javascript:void(0);" onclick="MGJS.switchTab('thetrackbacks', 'thecomments,commentnavi', 'trackbacktab', 'curtab', 'commenttab', 'tab');">Trackbacks (0)</a>
				<span class="addcomment"><a href="#respond" title="Participate by commenting on this topic">Leave a comment</a></span>
				<span class="addtrackback"><a href="http://blogagic.com/18/flex-component-life-cycle/trackback" title="Trackback URL for this post">Trackback</a></span>
		<div class="fixed"></div>
</div>

<div id="commentlist">
	<!-- comments START -->
	<ol id="thecomments">
			<li class="messagebox">
			No comments yet: be the first commenter!		</li>
		</ol>
	<!-- comments END -->


	<!-- trackbacks START -->
			<ol id="thetrackbacks">
							<li class="messagebox">
					No trackbacks yet.				</li>

					</ol>
		<div class="fixed"></div>
	<!-- trackbacks END -->
</div>

</div>

	<form action="http://blogagic.com/wp-comments-post.php" method="post" id="commentform">
	<div id="respond">

					
			<div id="author_info">
				<div class="row">
					<input type="text" name="author" id="author" class="textfield" value="" size="24" tabindex="1" />
					<label for="author" class="small">Name (required)</label>
				</div>
				<div class="row">
					<input type="text" name="email" id="email" class="textfield" value="" size="24" tabindex="2" />
					<label for="email" class="small">E-Mail (will not be published) (required)</label>
				</div>
				<div class="row">
					<input type="text" name="url" id="url" class="textfield" value="" size="24" tabindex="3" />
					<label for="url" class="small">Website</label>
				</div>
			</div>

			
		
		<!-- anti spam protection (JYC) -->
		 	
				<div class="row">
					<input type="text" name="mcspvalue" id="mcspvalue" class="textfield" value="" size="24" tabindex="4" />
					<label for="mcspvalue" class="small">Spam protection: Sum of 6 + 8 ?</label>
					<input type="hidden" name="mcspinfo" value="c3013" />
				</div>
					<div class="row">
			<span class="commenthelp">
				Put ActionScript or MXML code snippets between tags: [as3][/as3]<br/>
				You can also resize the comment area by dragging the bottom right corner.
			</span>
		</div>
		<!-- comment input -->
		<div class="row">
			<textarea name="comment" id="comment" tabindex="4" rows="8" cols="50"></textarea>
		</div>
		
		<!-- comment submit and rss -->
		<div id="submitbox">		
			<a class="feed" href="http://blogagic.com/comments/feed" title="Subscribe to RSS comments feed">Subscribe to comments feed</a>
			<div class="submitbutton">
				<input name="submit" type="submit" id="submit" class="button" tabindex="5" title="Submit your comment" value="Submit Comment" />
			</div>
						<input type="hidden" name="comment_post_ID" value="18" />
			<div class="fixed"></div>
		</div>
		

	<p style="clear: both;" class="subscribe-to-comments">
	<input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" />
	<label for="subscribe">Notify me of follow up comments via e-mail</label>
	</p>


	</div>		
	</form>

	

	<div id="postnavi">
		<span class="prev"><a href="http://blogagic.com/50/the-blogagic-flex-explorer-collection" rel="next" title="Read: The Blogagic Flex Explorer Collection">The Blogagic Flex Explorer Collection</a></span>
		<span class="next"><a href="http://blogagic.com/14/the-blogagic-custom-flex-preloader" rel="prev" title="Read: The Blogagic Custom Flex Preloader">The Blogagic Custom Flex Preloader</a></span>
		<div class="fixed"></div>
	</div>


<div class="sharepost">
<div class="sharer">
<script type="text/javascript">
tweetmeme_source = 'blogagic'; tweetmeme_service = 'bit.ly'; tweetmeme_url = 'http://blogagic.com/18/flex-component-life-cycle';
</script>
<script type="text/javascript" src="http://tweetmeme.com/i/scripts/button.js"></script>
</div>
	
<div class="sharer">
<script src="http://widgets.digg.com/buttons.js" type="text/javascript"></script>
<a class="DiggThisButton DiggMedium"></a>
</div>
<div class="sharer">
<script src="http://www.stumbleupon.com/hostedbadge.php?s=5&amp;r=http://blogagic.com/18/flex-component-life-cycle"></script>
</div>


</div>

	</div>
	<!-- main END -->

	
<!-- sidebar START -->
<div id="sidebar">

	<!-- sidebar north START -->
		<div id="northsidebar" class="sidebar">

			<div id="text-4" class="widget widget_text">			<div class="textwidget"><a href="http://twitter.com/Blogagic" onclick="javascript:_gaq.push(['_trackEvent','outbound-widget','twitter.com']);"><img class="aligncenter size-full wp-image-181" title="Follow Blogagic on Twitter" src="http://blogagic.com/wp-content/uploads/2010/07/BlogagicOnTwitter.png" alt="Follow Blogagic on Twitter icon" width="128" height="128" /></a>
<a href="http://blogagic.com/feed"  rel="nofollow"><img class="alignleft size-full wp-image-176" title="Subscribe to the Blogagic Posts feed" src="http://blogagic.com/wp-content/uploads/2010/05/blogagic_rss_feed.png" alt="Blogagic RSS Feed icon" width="48" height="48" /></a><a href="http://blogagic.com/feed"  title="Subscribe to the Blogagic Posts feed" rel="nofollow">Don't miss any new topic discussed here by subscribing to the Blogagic RSS Feed.</a>

<p><a href="http://blogagic.com/comments/feed"  rel="nofollow"><img class="alignright size-full wp-image-181" title="Subscribe to the Blogagic Comments feed" src="http://blogagic.com/wp-content/uploads/2010/05/Newspaper_Feed_48x48.png" alt="Blogagic Comment RSS Feed icon" width="48" height="48" /></a><a href="http://blogagic.com/comments/feed"  title="Subscribe to the Blogagic Comments feed" rel="nofollow">You can, of course, also subscribe to the Blogagic comments RSS Feed.</a></p></div>
		</div>		<div id="recent-posts-3" class="widget widget_recent_entries">		<h3>Recent Posts</h3>		<ul>
				<li><a href="http://blogagic.com/190/easy-flex-tooltip-customization-using-html-tags" title="Easy Flex ToolTip customization using HTML tags">Easy Flex ToolTip customization using HTML tags </a></li>
				<li><a href="http://blogagic.com/178/customizing-right-click-menu-of-flex-applications" title="Customizing Right Click Menu of Flex Applications">Customizing Right Click Menu of Flex Applications </a></li>
				<li><a href="http://blogagic.com/163/flex-memory-management-and-memory-leaks" title="Flex Memory Management and Memory Leaks">Flex Memory Management and Memory Leaks </a></li>
				<li><a href="http://blogagic.com/154/learning-flex-development-the-2-0-way-part-1" title="Learning Flex development the 2.0 way (part 1)">Learning Flex development the 2.0 way (part 1) </a></li>
				<li><a href="http://blogagic.com/140/changing-flex-itemrenderer-at-runtime" title="Changing Flex itemRenderer at runtime">Changing Flex itemRenderer at runtime </a></li>
				</ul>
		</div>		<div id="recent-comments-3" class="widget widget_recent_comments">			<h3>Recent Comments</h3>			<ul id="recentcomments"><li class="recentcomments"><a href="http://topsy.com/blogagic.com/190/easy-flex-tooltip-customization-using-html-tags?utm_source=pingback&amp;utm_campaign=L2" onclick="javascript:_gaq.push(['_trackEvent','outbound-commentauthor','topsy.com']);"  rel='external nofollow' class='url'>Tweets that mention Easy Flex ToolTip customization using HTML tags | Blogagic -- Topsy.com</a> on <a href="http://blogagic.com/190/easy-flex-tooltip-customization-using-html-tags/comment-page-1#comment-19">Easy Flex ToolTip customization using HTML tags</a></li><li class="recentcomments"><a href="http://blogagic.com"   rel='external nofollow' class='url'>JYC</a> on <a href="http://blogagic.com/163/flex-memory-management-and-memory-leaks/comment-page-1#comment-17">Flex Memory Management and Memory Leaks</a></li><li class="recentcomments">Cardin on <a href="http://blogagic.com/163/flex-memory-management-and-memory-leaks/comment-page-1#comment-16">Flex Memory Management and Memory Leaks</a></li><li class="recentcomments"><a href="http://blogagic.com"   rel='external nofollow' class='url'>JYC</a> on <a href="http://blogagic.com/133/adding-events-to-flex-custom-components/comment-page-1#comment-13">Adding Events to Flex Custom Components</a></li><li class="recentcomments">Sri on <a href="http://blogagic.com/133/adding-events-to-flex-custom-components/comment-page-1#comment-11">Adding Events to Flex Custom Components</a></li></ul>
		</div><div id="tag_cloud-3" class="widget widget_tag_cloud"><h3>Tag Cloud</h3><div><a href='http://blogagic.com/key/advanceddatagrid' class='tag-link-21' title='1 topic' style='font-size: 8pt;'>AdvancedDataGrid</a>
<a href='http://blogagic.com/key/blogagic' class='tag-link-8' title='1 topic' style='font-size: 8pt;'>blogagic</a>
<a href='http://blogagic.com/key/contextmenu' class='tag-link-25' title='1 topic' style='font-size: 8pt;'>ContextMenu</a>
<a href='http://blogagic.com/key/css' class='tag-link-14' title='1 topic' style='font-size: 8pt;'>css</a>
<a href='http://blogagic.com/key/custom-component' class='tag-link-9' title='4 topics' style='font-size: 15.5675675676pt;'>custom component</a>
<a href='http://blogagic.com/key/discussion' class='tag-link-22' title='1 topic' style='font-size: 8pt;'>discussion</a>
<a href='http://blogagic.com/key/effect' class='tag-link-15' title='1 topic' style='font-size: 8pt;'>effect</a>
<a href='http://blogagic.com/key/event' class='tag-link-17' title='1 topic' style='font-size: 8pt;'>event</a>
<a href='http://blogagic.com/key/event-listener' class='tag-link-24' title='1 topic' style='font-size: 8pt;'>event listener</a>
<a href='http://blogagic.com/key/explorer' class='tag-link-12' title='1 topic' style='font-size: 8pt;'>explorer</a>
<a href='http://blogagic.com/key/flex' class='tag-link-3' title='10 topics' style='font-size: 22pt;'>Flex</a>
<a href='http://blogagic.com/key/howto' class='tag-link-27' title='1 topic' style='font-size: 8pt;'>howto</a>
<a href='http://blogagic.com/key/itemrenderer' class='tag-link-18' title='1 topic' style='font-size: 8pt;'>itemRenderer</a>
<a href='http://blogagic.com/key/life-cycle' class='tag-link-11' title='1 topic' style='font-size: 8pt;'>life cycle</a>
<a href='http://blogagic.com/key/memory-leak' class='tag-link-23' title='1 topic' style='font-size: 8pt;'>memory leak</a>
<a href='http://blogagic.com/key/preloader' class='tag-link-10' title='1 topic' style='font-size: 8pt;'>preloader</a>
<a href='http://blogagic.com/key/sparkline' class='tag-link-20' title='1 topic' style='font-size: 8pt;'>sparkline</a>
<a href='http://blogagic.com/key/style' class='tag-link-13' title='2 topics' style='font-size: 11.4054054054pt;'>style</a>
<a href='http://blogagic.com/key/tooltip' class='tag-link-28' title='1 topic' style='font-size: 8pt;'>tooltip</a>
<a href='http://blogagic.com/key/tutorial' class='tag-link-16' title='5 topics' style='font-size: 17.0810810811pt;'>Tutorial</a></div>
</div><div id="categories-3" class="widget widget_categories"><h3>Categories</h3>		<ul>
	<li class="cat-item cat-item-7"><a href="http://blogagic.com/cat/blogging" title="View all posts filed under Blogging">Blogging</a> (1)
</li>
	<li class="cat-item cat-item-3"><a href="http://blogagic.com/cat/flex" title="View all posts filed under Flex">Flex</a> (10)
<ul class='children'>
	<li class="cat-item cat-item-4"><a href="http://blogagic.com/cat/flex/component" title="View all posts filed under Custom Component">Custom Component</a> (1)
</li>
	<li class="cat-item cat-item-6"><a href="http://blogagic.com/cat/flex/datagrid" title="View all posts filed under DataGrid">DataGrid</a> (1)
</li>
	<li class="cat-item cat-item-26"><a href="http://blogagic.com/cat/flex/how-to" title="View all posts filed under How To">How To</a> (1)
</li>
	<li class="cat-item cat-item-16"><a href="http://blogagic.com/cat/flex/tutorial" title="View all posts filed under Tutorial">Tutorial</a> (5)
</li>
</ul>
</li>
		</ul>
</div><div id="archives-3" class="widget widget_archive"><h3>Archives</h3>		<ul>
			<li><a href='http://blogagic.com/date/2010/07' title='July 2010'>July 2010</a>&nbsp;(2)</li>
	<li><a href='http://blogagic.com/date/2010/06' title='June 2010'>June 2010</a>&nbsp;(2)</li>
	<li><a href='http://blogagic.com/date/2010/05' title='May 2010'>May 2010</a>&nbsp;(7)</li>
		</ul>
</div><div id="text-3" class="widget widget_text"><h3>Licensing</h3>			<div class="textwidget"><a rel="license" title="Creative Commons Attribution License (in French)" href="http://creativecommons.org/licenses/by/2.0/fr/" onclick="javascript:_gaq.push(['_trackEvent','outbound-widget','creativecommons.org']);"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by/2.0/fr/88x31.png" /></a><br />Blogagic Flex Development Tips by <a href="http://blogagic.com"  title="License is for Blogagic">Blogagic</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/2.0/fr/" onclick="javascript:_gaq.push(['_trackEvent','outbound-widget','creativecommons.org']);" title="Creative Commons Attribution License (in French)">Creative Commons Paternit&#233; 2.0 France License</a>.
<p>Source code provided here is licensed under a <a rel="Code license" href="http://creativecommons.org/licenses/BSD/" onclick="javascript:_gaq.push(['_trackEvent','outbound-widget','creativecommons.org']);" title="Creative Commons BSD License (in French)">Creative Commons BSD Licence</a>.
</p></div>
		</div>		</div>
	<!-- sidebar north END -->

	<!-- sidebar south START -->
		<div id="southsidebar" class="sidebar">
			
					</div>
	<!-- sidebar south END -->

</div>
<!-- sidebar END -->
	<div class="fixed"></div>
</div>
<!-- content END -->

<!-- footer START -->
<div id="footer">
	<a id="gotop" href="#" onclick="MGJS.goTop();return false;">Top</a>
	<!-- <a id="powered" href="http://wordpress.org/">WordPress</a> -->
	<div id="copyright">
		Copyright &copy; 2010 Blogagic		- Licensed under <a href="http://creativecommons.org/licenses/by/2.0/fr/">Creative Commons Paternit&#233; 2.0</a>. Code samples licensed under <a href="http://creativecommons.org/licenses/BSD/">Creative Commons BSD</a>.
	</div>
	<div id="themeinfo">
		Theme iNove by NeoEase.	</div>
</div>
<!-- footer END -->

</div>
<!-- container END -->
</div>
<!-- wrap END -->

<script type='text/javascript'>
/* <![CDATA[ */
var emailL10n = {
	ajax_url: "http://blogagic.com/wp-content/plugins/wp-email/wp-email.php",
	max_allowed: "5",
	text_error: "The Following Error Occurs:",
	text_name_invalid: "- Your Name is empty/invalid",
	text_email_invalid: "- Your Email is empty/invalid",
	text_remarks_invalid: "- Your Remarks is invalid",
	text_friend_names_empty: "- Friend Name(s) is empty",
	text_friend_name_invalid: "- Friend Name is empty/invalid: ",
	text_max_friend_names_allowed: "- Maximum 5 Friend Names allowed",
	text_friend_emails_empty: "- Friend Email(s) is empty",
	text_friend_email_invalid: "- Friend Email is invalid: ",
	text_max_friend_emails_allowed: "- Maximum 5 Friend Emails allowed",
	text_friends_tally: "- Friend Name(s) count does not tally with Friend Email(s) count",
	text_image_verify_empty: "- Image Verification is empty"
};
/* ]]> */
</script>
<script type='text/javascript' src='http://blogagic.com/wp-content/plugins/wp-email/email-js.js?ver=2.50'></script>
<script type='text/javascript' src='http://blogagic.com/wp-includes/js/jquery/jquery.form.js?ver=2.02m'></script>
<script type='text/javascript' src='http://blogagic.com/wp-content/plugins/contact-form-7/scripts.js?ver=2.3'></script>
<script type='text/javascript' src='http://blogagic.com/wp-content/plugins/sexybookmarks/js/sexy-bookmarks-public.js?ver=3.2.3.1'></script>
<p><a href="http://www.bad-behavior.ioerror.us/">Bad Behavior</a> has blocked <strong>91</strong> access attempts in the last 7 days.</p><script type='text/javascript' src='http://blogagic.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter/scripts/shCore.js?ver=2.1.364b'></script>
<script type='text/javascript' src='http://blogagic.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter/scripts/shBrushAS3.js?ver=2.1.364b'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://blogagic.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter/styles/shCore.css?ver=2.1.364b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].appendChild(corecss);
		var themecssurl = "http://blogagic.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter/styles/shThemeDefault.css?ver=2.1.364b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.getElementsByTagName("head")[0].appendChild(themecss);
	})();
	SyntaxHighlighter.config.clipboardSwf = 'http://blogagic.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter/scripts/clipboard.swf';
	SyntaxHighlighter.config.strings.expandSource = 'show source';
	SyntaxHighlighter.config.strings.viewSource = 'view source';
	SyntaxHighlighter.config.strings.copyToClipboard = 'copy to clipboard';
	SyntaxHighlighter.config.strings.copyToClipboardConfirmation = 'The code is in your clipboard now';
	SyntaxHighlighter.config.strings.print = 'print';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['wrap-lines'] = false;
	SyntaxHighlighter.all();
</script>

</body>
</html>

